/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/videocontext/dist/videocontext.js":
/*!********************************************************!*\
  !*** ./node_modules/videocontext/dist/videocontext.js ***!
  \********************************************************/
/***/ (function(module) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(window, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_549__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_549__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_549__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_549__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_549__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_549__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__nested_webpack_require_549__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__nested_webpack_require_549__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_549__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__nested_webpack_require_549__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_549__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_549__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_549__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_549__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_549__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_549__(__nested_webpack_require_549__.s = \"./src/videocontext.js\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./src/Definitions/aaf_video_crop/aaf_video_crop.frag\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/aaf_video_crop/aaf_video_crop.frag ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image;\\nuniform float cropLeft;\\nuniform float cropRight;\\nuniform float cropTop;\\nuniform float cropBottom;\\nvarying vec2 v_texCoord;\\nvoid main(){\\n    vec4 color = texture2D(u_image, v_texCoord);\\n    if (v_texCoord[0] < (cropLeft+1.0)/2.0) color = vec4(0.0,0.0,0.0,0.0);\\n    if (v_texCoord[0] > (cropRight+1.0)/2.0) color = vec4(0.0,0.0,0.0,0.0);\\n    if (v_texCoord[1] < (-cropBottom+1.0)/2.0) color = vec4(0.0,0.0,0.0,0.0);\\n    if (v_texCoord[1] > (-cropTop+1.0)/2.0) color = vec4(0.0,0.0,0.0,0.0);\\n    gl_FragColor = color;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/aaf_video_crop/aaf_video_crop.js\":\n/*!**********************************************************!*\\\n  !*** ./src/Definitions/aaf_video_crop/aaf_video_crop.js ***!\n  \\**********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_5252__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _aaf_video_crop = __nested_webpack_require_5252__(/*! ./aaf_video_crop.vert */ \"./src/Definitions/aaf_video_crop/aaf_video_crop.vert\");\n\nvar _aaf_video_crop2 = _interopRequireDefault(_aaf_video_crop);\n\nvar _aaf_video_crop3 = __nested_webpack_require_5252__(/*! ./aaf_video_crop.frag */ \"./src/Definitions/aaf_video_crop/aaf_video_crop.frag\");\n\nvar _aaf_video_crop4 = _interopRequireDefault(_aaf_video_crop3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar aaf_video_crop = {\n    title: \"AAF Video Crop Effect\",\n    description: \"A crop effect based on the AAF spec.\",\n    vertexShader: _aaf_video_crop2.default,\n    fragmentShader: _aaf_video_crop4.default,\n    properties: {\n        cropLeft: { type: \"uniform\", value: -1.0 },\n        cropRight: { type: \"uniform\", value: 1.0 },\n        cropTop: { type: \"uniform\", value: -1.0 },\n        cropBottom: { type: \"uniform\", value: 1.0 }\n    },\n    inputs: [\"u_image\"]\n};\n\nexports.default = aaf_video_crop;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/aaf_video_crop/aaf_video_crop.vert\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/aaf_video_crop/aaf_video_crop.vert ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/aaf_video_flip/aaf_video_flip.frag\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/aaf_video_flip/aaf_video_flip.frag ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texCoord;\\nvoid main(){\\n    vec2 coord = vec2(v_texCoord[0] ,1.0 - v_texCoord[1]);\\n    vec4 color = texture2D(u_image, coord);\\n    gl_FragColor = color;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/aaf_video_flip/aaf_video_flip.js\":\n/*!**********************************************************!*\\\n  !*** ./src/Definitions/aaf_video_flip/aaf_video_flip.js ***!\n  \\**********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_7859__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _aaf_video_flip = __nested_webpack_require_7859__(/*! ./aaf_video_flip.vert */ \"./src/Definitions/aaf_video_flip/aaf_video_flip.vert\");\n\nvar _aaf_video_flip2 = _interopRequireDefault(_aaf_video_flip);\n\nvar _aaf_video_flip3 = __nested_webpack_require_7859__(/*! ./aaf_video_flip.frag */ \"./src/Definitions/aaf_video_flip/aaf_video_flip.frag\");\n\nvar _aaf_video_flip4 = _interopRequireDefault(_aaf_video_flip3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar aaf_video_flip = {\n    title: \"AAF Video Flip Effect\",\n    description: \"A flip effect based on the AAF spec. Mirrors the image in the x-axis\",\n    vertexShader: _aaf_video_flip2.default,\n    fragmentShader: _aaf_video_flip4.default,\n    properties: {},\n    inputs: [\"u_image\"]\n};\n\nexports.default = aaf_video_flip;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/aaf_video_flip/aaf_video_flip.vert\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/aaf_video_flip/aaf_video_flip.vert ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/aaf_video_flop/aaf_video_flop.frag\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/aaf_video_flop/aaf_video_flop.frag ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texCoord;\\nvoid main(){\\n    vec2 coord = vec2(1.0 - v_texCoord[0] ,v_texCoord[1]);\\n    vec4 color = texture2D(u_image, coord);\\n    gl_FragColor = color;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/aaf_video_flop/aaf_video_flop.js\":\n/*!**********************************************************!*\\\n  !*** ./src/Definitions/aaf_video_flop/aaf_video_flop.js ***!\n  \\**********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_10286__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _aaf_video_flop = __nested_webpack_require_10286__(/*! ./aaf_video_flop.vert */ \"./src/Definitions/aaf_video_flop/aaf_video_flop.vert\");\n\nvar _aaf_video_flop2 = _interopRequireDefault(_aaf_video_flop);\n\nvar _aaf_video_flop3 = __nested_webpack_require_10286__(/*! ./aaf_video_flop.frag */ \"./src/Definitions/aaf_video_flop/aaf_video_flop.frag\");\n\nvar _aaf_video_flop4 = _interopRequireDefault(_aaf_video_flop3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar aaf_video_flop = {\n    title: \"AAF Video Flop Effect\",\n    description: \"A flop effect based on the AAF spec. Mirrors the image in the y-axis\",\n    vertexShader: _aaf_video_flop2.default,\n    fragmentShader: _aaf_video_flop4.default,\n    properties: {},\n    inputs: [\"u_image\"]\n};\n\nexports.default = aaf_video_flop;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/aaf_video_flop/aaf_video_flop.vert\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/aaf_video_flop/aaf_video_flop.vert ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/aaf_video_position/aaf_video_position.frag\":\n/*!********************************************************************!*\\\n  !*** ./src/Definitions/aaf_video_position/aaf_video_position.frag ***!\n  \\********************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image;\\nuniform float positionOffsetX;\\nuniform float positionOffsetY;\\nvarying vec2 v_texCoord;\\nvarying float v_progress;\\nvoid main(){\\n    vec2 pos = vec2(v_texCoord[0] - positionOffsetX/2.0, v_texCoord[1] -  positionOffsetY/2.0);\\n    vec4 color = texture2D(u_image, pos);\\n    if (pos[0] < 0.0 || pos[0] > 1.0 || pos[1] < 0.0 || pos[1] > 1.0){\\n        color = vec4(0.0,0.0,0.0,0.0);\\n    }\\n    gl_FragColor = color;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/aaf_video_position/aaf_video_position.js\":\n/*!******************************************************************!*\\\n  !*** ./src/Definitions/aaf_video_position/aaf_video_position.js ***!\n  \\******************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_13022__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _aaf_video_position = __nested_webpack_require_13022__(/*! ./aaf_video_position.vert */ \"./src/Definitions/aaf_video_position/aaf_video_position.vert\");\n\nvar _aaf_video_position2 = _interopRequireDefault(_aaf_video_position);\n\nvar _aaf_video_position3 = __nested_webpack_require_13022__(/*! ./aaf_video_position.frag */ \"./src/Definitions/aaf_video_position/aaf_video_position.frag\");\n\nvar _aaf_video_position4 = _interopRequireDefault(_aaf_video_position3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar aaf_video_position = {\n    title: \"AAF Video Position Effect\",\n    description: \"A position effect based on the AAF spec.\",\n    vertexShader: _aaf_video_position2.default,\n    fragmentShader: _aaf_video_position4.default,\n    properties: {\n        positionOffsetX: { type: \"uniform\", value: 0.0 },\n        positionOffsetY: { type: \"uniform\", value: 0.0 }\n    },\n    inputs: [\"u_image\"]\n};\n\nexports.default = aaf_video_position;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/aaf_video_position/aaf_video_position.vert\":\n/*!********************************************************************!*\\\n  !*** ./src/Definitions/aaf_video_position/aaf_video_position.vert ***!\n  \\********************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/aaf_video_scale/aaf_video_scale.frag\":\n/*!**************************************************************!*\\\n  !*** ./src/Definitions/aaf_video_scale/aaf_video_scale.frag ***!\n  \\**************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image;\\nuniform float scaleX;\\nuniform float scaleY;\\nvarying vec2 v_texCoord;\\nvarying float v_progress;\\nvoid main(){\\n    vec2 pos = vec2(v_texCoord[0]*1.0/scaleX - (1.0/scaleX/2.0 -0.5), v_texCoord[1]*1.0/scaleY - (1.0/scaleY/2.0 -0.5));\\n    vec4 color = texture2D(u_image, pos);\\n    if (pos[0] < 0.0 || pos[0] > 1.0 || pos[1] < 0.0 || pos[1] > 1.0){\\n        color = vec4(0.0,0.0,0.0,0.0);\\n    }\\n    gl_FragColor = color;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/aaf_video_scale/aaf_video_scale.js\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/aaf_video_scale/aaf_video_scale.js ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_15909__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _aaf_video_scale = __nested_webpack_require_15909__(/*! ./aaf_video_scale.vert */ \"./src/Definitions/aaf_video_scale/aaf_video_scale.vert\");\n\nvar _aaf_video_scale2 = _interopRequireDefault(_aaf_video_scale);\n\nvar _aaf_video_scale3 = __nested_webpack_require_15909__(/*! ./aaf_video_scale.frag */ \"./src/Definitions/aaf_video_scale/aaf_video_scale.frag\");\n\nvar _aaf_video_scale4 = _interopRequireDefault(_aaf_video_scale3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar aaf_video_scale = {\n    title: \"AAF Video Scale Effect\",\n    description: \"A scale effect based on the AAF spec.\",\n    vertexShader: _aaf_video_scale2.default,\n    fragmentShader: _aaf_video_scale4.default,\n    properties: {\n        scaleX: { type: \"uniform\", value: 1.0 },\n        scaleY: { type: \"uniform\", value: 1.0 }\n    },\n    inputs: [\"u_image\"]\n};\n\nexports.default = aaf_video_scale;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/aaf_video_scale/aaf_video_scale.vert\":\n/*!**************************************************************!*\\\n  !*** ./src/Definitions/aaf_video_scale/aaf_video_scale.vert ***!\n  \\**************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/colorThreshold/colorThreshold.frag\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/colorThreshold/colorThreshold.frag ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image;\\nuniform float a;\\nuniform vec3 colorAlphaThreshold;\\nvarying vec2 v_texCoord;\\nvarying float v_mix;\\nvoid main(){\\n    vec4 color = texture2D(u_image, v_texCoord);\\n    if (color[0] > colorAlphaThreshold[0] && color[1]> colorAlphaThreshold[1] && color[2]> colorAlphaThreshold[2]){\\n        color = vec4(0.0,0.0,0.0,0.0);\\n    }\\n    gl_FragColor = color;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/colorThreshold/colorThreshold.js\":\n/*!**********************************************************!*\\\n  !*** ./src/Definitions/colorThreshold/colorThreshold.js ***!\n  \\**********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_18616__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _colorThreshold = __nested_webpack_require_18616__(/*! ./colorThreshold.vert */ \"./src/Definitions/colorThreshold/colorThreshold.vert\");\n\nvar _colorThreshold2 = _interopRequireDefault(_colorThreshold);\n\nvar _colorThreshold3 = __nested_webpack_require_18616__(/*! ./colorThreshold.frag */ \"./src/Definitions/colorThreshold/colorThreshold.frag\");\n\nvar _colorThreshold4 = _interopRequireDefault(_colorThreshold3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar colorThreshold = {\n    title: \"Color Threshold\",\n    description: \"Turns all pixels with a greater value than the specified threshold transparent.\",\n    vertexShader: _colorThreshold2.default,\n    fragmentShader: _colorThreshold4.default,\n    properties: {\n        a: { type: \"uniform\", value: 0.0 },\n        colorAlphaThreshold: { type: \"uniform\", value: [0.0, 0.55, 0.0] }\n    },\n    inputs: [\"u_image\"]\n};\n\nexports.default = colorThreshold;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/colorThreshold/colorThreshold.vert\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/colorThreshold/colorThreshold.vert ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/combine/combine.frag\":\n/*!**********************************************!*\\\n  !*** ./src/Definitions/combine/combine.frag ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image;\\nuniform float a;\\nvarying vec2 v_texCoord;\\nvarying float v_mix;\\nvoid main(){\\n    vec4 color = texture2D(u_image, v_texCoord);\\n    gl_FragColor = color;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/combine/combine.js\":\n/*!********************************************!*\\\n  !*** ./src/Definitions/combine/combine.js ***!\n  \\********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_21044__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _combine = __nested_webpack_require_21044__(/*! ./combine.vert */ \"./src/Definitions/combine/combine.vert\");\n\nvar _combine2 = _interopRequireDefault(_combine);\n\nvar _combine3 = __nested_webpack_require_21044__(/*! ./combine.frag */ \"./src/Definitions/combine/combine.frag\");\n\nvar _combine4 = _interopRequireDefault(_combine3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar combine = {\n    title: \"Combine\",\n    description: \"A basic effect which renders the input to the output, Typically used as a combine node for layering up media with alpha transparency.\",\n    vertexShader: _combine2.default,\n    fragmentShader: _combine4.default,\n    properties: {\n        a: { type: \"uniform\", value: 0.0 }\n    },\n    inputs: [\"u_image\"]\n};\n\nexports.default = combine;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/combine/combine.vert\":\n/*!**********************************************!*\\\n  !*** ./src/Definitions/combine/combine.vert ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/crop/crop.frag\":\n/*!****************************************!*\\\n  !*** ./src/Definitions/crop/crop.frag ***!\n  \\****************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image;\\nuniform float x;\\nuniform float y;\\nuniform float width;\\nuniform float height;\\nvarying vec2 v_texCoord;\\nvarying float v_progress;\\nvoid main(){\\n    vec2 pos = (((v_texCoord)*vec2(width, height)) + vec2(0, 1.0-height)) +vec2(x,-y);\\n    vec4 color = texture2D(u_image, pos);\\n    if (pos[0] < 0.0 || pos[0] > 1.0 || pos[1] < 0.0 || pos[1] > 1.0){\\n        color = vec4(0.0,0.0,0.0,0.0);\\n    }\\n    gl_FragColor = color;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/crop/crop.js\":\n/*!**************************************!*\\\n  !*** ./src/Definitions/crop/crop.js ***!\n  \\**************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_23495__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _crop = __nested_webpack_require_23495__(/*! ./crop.vert */ \"./src/Definitions/crop/crop.vert\");\n\nvar _crop2 = _interopRequireDefault(_crop);\n\nvar _crop3 = __nested_webpack_require_23495__(/*! ./crop.frag */ \"./src/Definitions/crop/crop.frag\");\n\nvar _crop4 = _interopRequireDefault(_crop3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar crop = {\n    title: \"Primer Simple Crop\",\n    description: \"A simple crop processors for primer\",\n    vertexShader: _crop2.default,\n    fragmentShader: _crop4.default,\n    properties: {\n        x: { type: \"uniform\", value: 0.0 },\n        y: { type: \"uniform\", value: 0.0 },\n        width: { type: \"uniform\", value: 1.0 },\n        height: { type: \"uniform\", value: 1.0 }\n    },\n    inputs: [\"u_image\"]\n};\n\nexports.default = crop;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/crop/crop.vert\":\n/*!****************************************!*\\\n  !*** ./src/Definitions/crop/crop.vert ***!\n  \\****************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/crossfade/crossfade.frag\":\n/*!**************************************************!*\\\n  !*** ./src/Definitions/crossfade/crossfade.frag ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image_a;\\nuniform sampler2D u_image_b;\\nuniform float mix;\\nvarying vec2 v_texCoord;\\nvarying float v_mix;\\nvoid main(){\\n    vec4 color_a = texture2D(u_image_a, v_texCoord);\\n    vec4 color_b = texture2D(u_image_b, v_texCoord);\\n    color_a[0] *= (1.0 - mix);\\n    color_a[1] *= (1.0 - mix);\\n    color_a[2] *= (1.0 - mix);\\n    color_a[3] *= (1.0 - mix);\\n    color_b[0] *= mix;\\n    color_b[1] *= mix;\\n    color_b[2] *= mix;\\n    color_b[3] *= mix;\\n    gl_FragColor = color_a + color_b;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/crossfade/crossfade.js\":\n/*!************************************************!*\\\n  !*** ./src/Definitions/crossfade/crossfade.js ***!\n  \\************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_26068__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _crossfade = __nested_webpack_require_26068__(/*! ./crossfade.vert */ \"./src/Definitions/crossfade/crossfade.vert\");\n\nvar _crossfade2 = _interopRequireDefault(_crossfade);\n\nvar _crossfade3 = __nested_webpack_require_26068__(/*! ./crossfade.frag */ \"./src/Definitions/crossfade/crossfade.frag\");\n\nvar _crossfade4 = _interopRequireDefault(_crossfade3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar crossfade = {\n    title: \"Cross-Fade\",\n    description: \"A cross-fade effect. Typically used as a transistion.\",\n    vertexShader: _crossfade2.default,\n    fragmentShader: _crossfade4.default,\n    properties: {\n        mix: { type: \"uniform\", value: 0.0 }\n    },\n    inputs: [\"u_image_a\", \"u_image_b\"]\n};\n\nexports.default = crossfade;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/crossfade/crossfade.vert\":\n/*!**************************************************!*\\\n  !*** ./src/Definitions/crossfade/crossfade.vert ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/definitions.js\":\n/*!****************************************!*\\\n  !*** ./src/Definitions/definitions.js ***!\n  \\****************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_27755__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _aaf_video_scale = __nested_webpack_require_27755__(/*! ./aaf_video_scale */ \"./src/Definitions/aaf_video_scale/aaf_video_scale.js\");\n\nvar _aaf_video_scale2 = _interopRequireDefault(_aaf_video_scale);\n\nvar _crossfade = __nested_webpack_require_27755__(/*! ./crossfade */ \"./src/Definitions/crossfade/crossfade.js\");\n\nvar _crossfade2 = _interopRequireDefault(_crossfade);\n\nvar _horizontalWipe = __nested_webpack_require_27755__(/*! ./horizontalWipe */ \"./src/Definitions/horizontalWipe/horizontalWipe.js\");\n\nvar _horizontalWipe2 = _interopRequireDefault(_horizontalWipe);\n\nvar _verticalWipe = __nested_webpack_require_27755__(/*! ./verticalWipe */ \"./src/Definitions/verticalWipe/verticalWipe.js\");\n\nvar _verticalWipe2 = _interopRequireDefault(_verticalWipe);\n\nvar _randomDissolve = __nested_webpack_require_27755__(/*! ./randomDissolve */ \"./src/Definitions/randomDissolve/randomDissolve.js\");\n\nvar _randomDissolve2 = _interopRequireDefault(_randomDissolve);\n\nvar _toColorAndBackFade = __nested_webpack_require_27755__(/*! ./toColorAndBackFade */ \"./src/Definitions/toColorAndBackFade/toColorAndBackFade.js\");\n\nvar _toColorAndBackFade2 = _interopRequireDefault(_toColorAndBackFade);\n\nvar _starWipe = __nested_webpack_require_27755__(/*! ./starWipe */ \"./src/Definitions/starWipe/starWipe.js\");\n\nvar _starWipe2 = _interopRequireDefault(_starWipe);\n\nvar _combine = __nested_webpack_require_27755__(/*! ./combine */ \"./src/Definitions/combine/combine.js\");\n\nvar _combine2 = _interopRequireDefault(_combine);\n\nvar _colorThreshold = __nested_webpack_require_27755__(/*! ./colorThreshold */ \"./src/Definitions/colorThreshold/colorThreshold.js\");\n\nvar _colorThreshold2 = _interopRequireDefault(_colorThreshold);\n\nvar _monochrome = __nested_webpack_require_27755__(/*! ./monochrome */ \"./src/Definitions/monochrome/monochrome.js\");\n\nvar _monochrome2 = _interopRequireDefault(_monochrome);\n\nvar _horizontalBlur = __nested_webpack_require_27755__(/*! ./horizontalBlur */ \"./src/Definitions/horizontalBlur/horizontalBlur.js\");\n\nvar _horizontalBlur2 = _interopRequireDefault(_horizontalBlur);\n\nvar _verticalBlur = __nested_webpack_require_27755__(/*! ./verticalBlur */ \"./src/Definitions/verticalBlur/verticalBlur.js\");\n\nvar _verticalBlur2 = _interopRequireDefault(_verticalBlur);\n\nvar _aaf_video_flop = __nested_webpack_require_27755__(/*! ./aaf_video_flop */ \"./src/Definitions/aaf_video_flop/aaf_video_flop.js\");\n\nvar _aaf_video_flop2 = _interopRequireDefault(_aaf_video_flop);\n\nvar _aaf_video_flip = __nested_webpack_require_27755__(/*! ./aaf_video_flip */ \"./src/Definitions/aaf_video_flip/aaf_video_flip.js\");\n\nvar _aaf_video_flip2 = _interopRequireDefault(_aaf_video_flip);\n\nvar _aaf_video_position = __nested_webpack_require_27755__(/*! ./aaf_video_position */ \"./src/Definitions/aaf_video_position/aaf_video_position.js\");\n\nvar _aaf_video_position2 = _interopRequireDefault(_aaf_video_position);\n\nvar _aaf_video_crop = __nested_webpack_require_27755__(/*! ./aaf_video_crop */ \"./src/Definitions/aaf_video_crop/aaf_video_crop.js\");\n\nvar _aaf_video_crop2 = _interopRequireDefault(_aaf_video_crop);\n\nvar _staticDissolve = __nested_webpack_require_27755__(/*! ./staticDissolve */ \"./src/Definitions/staticDissolve/staticDissolve.js\");\n\nvar _staticDissolve2 = _interopRequireDefault(_staticDissolve);\n\nvar _staticEffect = __nested_webpack_require_27755__(/*! ./staticEffect */ \"./src/Definitions/staticEffect/staticEffect.js\");\n\nvar _staticEffect2 = _interopRequireDefault(_staticEffect);\n\nvar _dreamfade = __nested_webpack_require_27755__(/*! ./dreamfade */ \"./src/Definitions/dreamfade/dreamfade.js\");\n\nvar _dreamfade2 = _interopRequireDefault(_dreamfade);\n\nvar _opacity = __nested_webpack_require_27755__(/*! ./opacity */ \"./src/Definitions/opacity/opacity.js\");\n\nvar _opacity2 = _interopRequireDefault(_opacity);\n\nvar _crop = __nested_webpack_require_27755__(/*! ./crop */ \"./src/Definitions/crop/crop.js\");\n\nvar _crop2 = _interopRequireDefault(_crop);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar DEFINITIONS = {\n    AAF_VIDEO_SCALE: _aaf_video_scale2.default,\n    CROSSFADE: _crossfade2.default,\n    DREAMFADE: _dreamfade2.default,\n    HORIZONTAL_WIPE: _horizontalWipe2.default,\n    VERTICAL_WIPE: _verticalWipe2.default,\n    RANDOM_DISSOLVE: _randomDissolve2.default,\n    STATIC_DISSOLVE: _staticDissolve2.default,\n    STATIC_EFFECT: _staticEffect2.default,\n    TO_COLOR_AND_BACK: _toColorAndBackFade2.default,\n    STAR_WIPE: _starWipe2.default,\n    COMBINE: _combine2.default,\n    COLORTHRESHOLD: _colorThreshold2.default,\n    MONOCHROME: _monochrome2.default,\n    HORIZONTAL_BLUR: _horizontalBlur2.default,\n    VERTICAL_BLUR: _verticalBlur2.default,\n    AAF_VIDEO_CROP: _aaf_video_crop2.default,\n    AAF_VIDEO_POSITION: _aaf_video_position2.default,\n    AAF_VIDEO_FLIP: _aaf_video_flip2.default,\n    AAF_VIDEO_FLOP: _aaf_video_flop2.default,\n    OPACITY: _opacity2.default,\n    CROP: _crop2.default\n};\n\nexports.default = DEFINITIONS;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/dreamfade/dreamfade.frag\":\n/*!**************************************************!*\\\n  !*** ./src/Definitions/dreamfade/dreamfade.frag ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image_a;\\nuniform sampler2D u_image_b;\\nuniform float mix;\\nvarying vec2 v_texCoord;\\nvarying float v_mix;\\nvoid main(){\\n    float wobble = 1.0 - abs((mix*2.0)-1.0);\\n    vec2 pos = vec2(v_texCoord[0] + ((sin(v_texCoord[1]*(10.0*wobble*3.14) + wobble*10.0)/13.0)), v_texCoord[1]);\\n    vec4 color_a = texture2D(u_image_a, pos);\\n    vec4 color_b = texture2D(u_image_b, pos);\\n    color_a[0] *= (1.0 - mix);\\n    color_a[1] *= (1.0 - mix);\\n    color_a[2] *= (1.0 - mix);\\n    color_a[3] *= (1.0 - mix);\\n    color_b[0] *= mix;\\n    color_b[1] *= mix;\\n    color_b[2] *= mix;\\n    color_b[3] *= mix;\\n    gl_FragColor = color_a + color_b;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/dreamfade/dreamfade.js\":\n/*!************************************************!*\\\n  !*** ./src/Definitions/dreamfade/dreamfade.js ***!\n  \\************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_33914__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _dreamfade = __nested_webpack_require_33914__(/*! ./dreamfade.vert */ \"./src/Definitions/dreamfade/dreamfade.vert\");\n\nvar _dreamfade2 = _interopRequireDefault(_dreamfade);\n\nvar _dreamfade3 = __nested_webpack_require_33914__(/*! ./dreamfade.frag */ \"./src/Definitions/dreamfade/dreamfade.frag\");\n\nvar _dreamfade4 = _interopRequireDefault(_dreamfade3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar dreamfade = {\n    title: \"Dream-Fade\",\n    description: \"A wobbly dream effect. Typically used as a transistion.\",\n    vertexShader: _dreamfade2.default,\n    fragmentShader: _dreamfade4.default,\n    properties: {\n        mix: { type: \"uniform\", value: 0.0 }\n    },\n    inputs: [\"u_image_a\", \"u_image_b\"]\n};\n\nexports.default = dreamfade;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/dreamfade/dreamfade.vert\":\n/*!**************************************************!*\\\n  !*** ./src/Definitions/dreamfade/dreamfade.vert ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/horizontalBlur/horizontalBlur.frag\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/horizontalBlur/horizontalBlur.frag ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texCoord;\\nvarying vec2 v_blurTexCoords[14];\\nvoid main(){\\n    gl_FragColor = vec4(0.0);\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 0])*0.0044299121055113265;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 1])*0.00895781211794;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 2])*0.0215963866053;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 3])*0.0443683338718;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 4])*0.0776744219933;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 5])*0.115876621105;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 6])*0.147308056121;\\n    gl_FragColor += texture2D(u_image, v_texCoord         )*0.159576912161;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 7])*0.147308056121;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 8])*0.115876621105;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 9])*0.0776744219933;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[10])*0.0443683338718;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[11])*0.0215963866053;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[12])*0.00895781211794;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[13])*0.0044299121055113265;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/horizontalBlur/horizontalBlur.js\":\n/*!**********************************************************!*\\\n  !*** ./src/Definitions/horizontalBlur/horizontalBlur.js ***!\n  \\**********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_37375__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _horizontalBlur = __nested_webpack_require_37375__(/*! ./horizontalBlur.vert */ \"./src/Definitions/horizontalBlur/horizontalBlur.vert\");\n\nvar _horizontalBlur2 = _interopRequireDefault(_horizontalBlur);\n\nvar _horizontalBlur3 = __nested_webpack_require_37375__(/*! ./horizontalBlur.frag */ \"./src/Definitions/horizontalBlur/horizontalBlur.frag\");\n\nvar _horizontalBlur4 = _interopRequireDefault(_horizontalBlur3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar horizontal_blur = {\n    title: \"Horizontal Blur\",\n    description: \"A horizontal blur effect. Adpated from http://xissburg.com/faster-gaussian-blur-in-glsl/\",\n    vertexShader: _horizontalBlur2.default,\n    fragmentShader: _horizontalBlur4.default,\n    properties: {\n        blurAmount: { type: \"uniform\", value: 1.0 }\n    },\n    inputs: [\"u_image\"]\n};\n\nexports.default = horizontal_blur;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/horizontalBlur/horizontalBlur.vert\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/horizontalBlur/horizontalBlur.vert ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nuniform float blurAmount;\\nvarying vec2 v_texCoord;\\nvarying vec2 v_blurTexCoords[14];\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n    v_blurTexCoords[ 0] = v_texCoord + vec2(-0.028 * blurAmount, 0.0);\\n    v_blurTexCoords[ 1] = v_texCoord + vec2(-0.024 * blurAmount, 0.0);\\n    v_blurTexCoords[ 2] = v_texCoord + vec2(-0.020 * blurAmount, 0.0);\\n    v_blurTexCoords[ 3] = v_texCoord + vec2(-0.016 * blurAmount, 0.0);\\n    v_blurTexCoords[ 4] = v_texCoord + vec2(-0.012 * blurAmount, 0.0);\\n    v_blurTexCoords[ 5] = v_texCoord + vec2(-0.008 * blurAmount, 0.0);\\n    v_blurTexCoords[ 6] = v_texCoord + vec2(-0.004 * blurAmount, 0.0);\\n    v_blurTexCoords[ 7] = v_texCoord + vec2( 0.004 * blurAmount, 0.0);\\n    v_blurTexCoords[ 8] = v_texCoord + vec2( 0.008 * blurAmount, 0.0);\\n    v_blurTexCoords[ 9] = v_texCoord + vec2( 0.012 * blurAmount, 0.0);\\n    v_blurTexCoords[10] = v_texCoord + vec2( 0.016 * blurAmount, 0.0);\\n    v_blurTexCoords[11] = v_texCoord + vec2( 0.020 * blurAmount, 0.0);\\n    v_blurTexCoords[12] = v_texCoord + vec2( 0.024 * blurAmount, 0.0);\\n    v_blurTexCoords[13] = v_texCoord + vec2( 0.028 * blurAmount, 0.0);\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/horizontalWipe/horizontalWipe.frag\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/horizontalWipe/horizontalWipe.frag ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image_a;\\nuniform sampler2D u_image_b;\\nuniform float mix;\\nvarying vec2 v_texCoord;\\nvarying float v_mix;\\nvoid main(){\\n    vec4 color_a = texture2D(u_image_a, v_texCoord);\\n    vec4 color_b = texture2D(u_image_b, v_texCoord);\\n    if (v_texCoord[0] > mix){\\n        gl_FragColor = color_a;\\n    } else {\\n        gl_FragColor = color_b;\\n    }\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/horizontalWipe/horizontalWipe.js\":\n/*!**********************************************************!*\\\n  !*** ./src/Definitions/horizontalWipe/horizontalWipe.js ***!\n  \\**********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_41113__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _horizontalWipe = __nested_webpack_require_41113__(/*! ./horizontalWipe.vert */ \"./src/Definitions/horizontalWipe/horizontalWipe.vert\");\n\nvar _horizontalWipe2 = _interopRequireDefault(_horizontalWipe);\n\nvar _horizontalWipe3 = __nested_webpack_require_41113__(/*! ./horizontalWipe.frag */ \"./src/Definitions/horizontalWipe/horizontalWipe.frag\");\n\nvar _horizontalWipe4 = _interopRequireDefault(_horizontalWipe3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar horizontal_wipe = {\n    title: \"Horizontal Wipe\",\n    description: \"A horizontal wipe effect. Typically used as a transistion.\",\n    vertexShader: _horizontalWipe2.default,\n    fragmentShader: _horizontalWipe4.default,\n    properties: {\n        mix: { type: \"uniform\", value: 0.0 }\n    },\n    inputs: [\"u_image_a\", \"u_image_b\"]\n};\n\nexports.default = horizontal_wipe;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/horizontalWipe/horizontalWipe.vert\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/horizontalWipe/horizontalWipe.vert ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/monochrome/monochrome.frag\":\n/*!****************************************************!*\\\n  !*** ./src/Definitions/monochrome/monochrome.frag ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image;\\nuniform vec3 inputMix;\\nuniform vec3 outputMix;\\nvarying vec2 v_texCoord;\\nvarying float v_mix;\\nvoid main(){\\n    vec4 color = texture2D(u_image, v_texCoord);\\n    float mono = color[0]*inputMix[0] + color[1]*inputMix[1] + color[2]*inputMix[2];\\n    color[0] = mono * outputMix[0];\\n    color[1] = mono * outputMix[1];\\n    color[2] = mono * outputMix[2];\\n    gl_FragColor = color;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/monochrome/monochrome.js\":\n/*!**************************************************!*\\\n  !*** ./src/Definitions/monochrome/monochrome.js ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_43740__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _monochrome = __nested_webpack_require_43740__(/*! ./monochrome.vert */ \"./src/Definitions/monochrome/monochrome.vert\");\n\nvar _monochrome2 = _interopRequireDefault(_monochrome);\n\nvar _monochrome3 = __nested_webpack_require_43740__(/*! ./monochrome.frag */ \"./src/Definitions/monochrome/monochrome.frag\");\n\nvar _monochrome4 = _interopRequireDefault(_monochrome3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar monochrome = {\n    title: \"Monochrome\",\n    description: \"Change images to a single chroma (e.g can be used to make a black & white filter). Input color mix and output color mix can be adjusted.\",\n    vertexShader: _monochrome2.default,\n    fragmentShader: _monochrome4.default,\n    properties: {\n        inputMix: { type: \"uniform\", value: [0.4, 0.6, 0.2] },\n        outputMix: { type: \"uniform\", value: [1.0, 1.0, 1.0] }\n    },\n    inputs: [\"u_image\"]\n};\n\nexports.default = monochrome;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/monochrome/monochrome.vert\":\n/*!****************************************************!*\\\n  !*** ./src/Definitions/monochrome/monochrome.vert ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/opacity/opacity.frag\":\n/*!**********************************************!*\\\n  !*** ./src/Definitions/opacity/opacity.frag ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image;\\nuniform float opacity;\\nvarying vec2 v_texCoord;\\nvarying float v_opacity;\\nvoid main(){\\n    vec4 color = texture2D(u_image, v_texCoord);\\n    color[3] *= opacity;\\n    gl_FragColor = color;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/opacity/opacity.js\":\n/*!********************************************!*\\\n  !*** ./src/Definitions/opacity/opacity.js ***!\n  \\********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_46168__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _opacity = __nested_webpack_require_46168__(/*! ./opacity.vert */ \"./src/Definitions/opacity/opacity.vert\");\n\nvar _opacity2 = _interopRequireDefault(_opacity);\n\nvar _opacity3 = __nested_webpack_require_46168__(/*! ./opacity.frag */ \"./src/Definitions/opacity/opacity.frag\");\n\nvar _opacity4 = _interopRequireDefault(_opacity3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar opacity = {\n    title: \"Opacity\",\n    description: \"Sets the opacity of an input.\",\n    vertexShader: _opacity2.default,\n    fragmentShader: _opacity4.default,\n    properties: {\n        opacity: { type: \"uniform\", value: 0.7 }\n    },\n    inputs: [\"u_image\"]\n};\n\nexports.default = opacity;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/opacity/opacity.vert\":\n/*!**********************************************!*\\\n  !*** ./src/Definitions/opacity/opacity.vert ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/randomDissolve/randomDissolve.frag\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/randomDissolve/randomDissolve.frag ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image_a;\\nuniform sampler2D u_image_b;\\nuniform float mix;\\nvarying vec2 v_texCoord;\\nvarying float v_mix;\\nfloat rand(vec2 co){\\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n}\\nvoid main(){\\n    vec4 color_a = texture2D(u_image_a, v_texCoord);\\n    vec4 color_b = texture2D(u_image_b, v_texCoord);\\n    if (clamp(rand(v_texCoord),  0.01, 1.001) > mix){\\n        gl_FragColor = color_a;\\n    } else {\\n        gl_FragColor = color_b;\\n    }\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/randomDissolve/randomDissolve.js\":\n/*!**********************************************************!*\\\n  !*** ./src/Definitions/randomDissolve/randomDissolve.js ***!\n  \\**********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_48716__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _randomDissolve = __nested_webpack_require_48716__(/*! ./randomDissolve.vert */ \"./src/Definitions/randomDissolve/randomDissolve.vert\");\n\nvar _randomDissolve2 = _interopRequireDefault(_randomDissolve);\n\nvar _randomDissolve3 = __nested_webpack_require_48716__(/*! ./randomDissolve.frag */ \"./src/Definitions/randomDissolve/randomDissolve.frag\");\n\nvar _randomDissolve4 = _interopRequireDefault(_randomDissolve3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar randomDissolve = {\n    title: \"Random Dissolve\",\n    description: \"A random dissolve effect. Typically used as a transistion.\",\n    vertexShader: _randomDissolve2.default,\n    fragmentShader: _randomDissolve4.default,\n    properties: {\n        mix: { type: \"uniform\", value: 0.0 }\n    },\n    inputs: [\"u_image_a\", \"u_image_b\"]\n};\n\nexports.default = randomDissolve;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/randomDissolve/randomDissolve.vert\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/randomDissolve/randomDissolve.vert ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/starWipe/starWipe.frag\":\n/*!************************************************!*\\\n  !*** ./src/Definitions/starWipe/starWipe.frag ***!\n  \\************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image_a;\\nuniform sampler2D u_image_b;\\nuniform float mix;\\nvarying vec2 v_texCoord;\\nvarying float v_mix;\\nfloat sign (vec2 p1, vec2 p2, vec2 p3){\\n    return (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1]);\\n}\\nbool pointInTriangle(vec2 pt, vec2 v1, vec2 v2, vec2 v3){\\n    bool b1, b2, b3;\\n    b1 = sign(pt, v1, v2) < 0.0;\\n    b2 = sign(pt, v2, v3) < 0.0;\\n    b3 = sign(pt, v3, v1) < 0.0;\\n    return ((b1 == b2) && (b2 == b3));\\n}\\nvec2 rotatePointAboutPoint(vec2 point, vec2 pivot, float angle){\\n    float s = sin(angle);\\n    float c = cos(angle);\\n    float x = point[0] - pivot[0];\\n    float y = point[1] - pivot[1];\\n    float new_x = x * c - y * s;\\n    float new_y = x * s + y * c;\\n    return vec2(new_x + pivot[0], new_y+pivot[1]);\\n}\\n\\nvoid main(){\\n    vec4 color_a = texture2D(u_image_b, v_texCoord);\\n    vec4 color_b = texture2D(u_image_a, v_texCoord);\\n    vec2 t0_p0,t0_p1,t0_p2,t1_p0,t1_p1,t1_p2,t2_p0,t2_p1,t2_p2,t3_p0,t3_p1,t3_p2;\\n    vec2 t4_p0,t4_p1,t4_p2,t5_p0,t5_p1,t5_p2,t6_p0,t6_p1,t6_p2,t7_p0,t7_p1,t7_p2;\\n\\n\\n    t0_p0 = vec2(0.0, 0.25) * clamp(mix,0.0,1.0) * 2.0 + vec2(0.5,0.5);\\n    t0_p1 = vec2(0.0, -0.25) * clamp(mix,0.0,1.0) * 2.0 + vec2(0.5,0.5);\\n    t0_p2 = vec2(1.0, 0.0) * clamp(mix,0.0,1.0) * 2.0 + vec2(0.5,0.5);\\n\\n    t1_p0 = rotatePointAboutPoint(t0_p0, vec2(0.5,0.5), 0.7854);\\n    t1_p1 = rotatePointAboutPoint(t0_p1, vec2(0.5,0.5), 0.7854);\\n    t1_p2 = rotatePointAboutPoint(t0_p2, vec2(0.5,0.5), 0.7854);\\n\\n    t2_p0 = rotatePointAboutPoint(t0_p0, vec2(0.5,0.5), 0.7854 * 2.0);\\n    t2_p1 = rotatePointAboutPoint(t0_p1, vec2(0.5,0.5), 0.7854 * 2.0);\\n    t2_p2 = rotatePointAboutPoint(t0_p2, vec2(0.5,0.5), 0.7854 * 2.0);\\n\\n    t3_p0 = rotatePointAboutPoint(t0_p0, vec2(0.5,0.5), 0.7854 * 3.0);\\n    t3_p1 = rotatePointAboutPoint(t0_p1, vec2(0.5,0.5), 0.7854 * 3.0);\\n    t3_p2 = rotatePointAboutPoint(t0_p2, vec2(0.5,0.5), 0.7854 * 3.0);\\n\\n    t4_p0 = rotatePointAboutPoint(t0_p0, vec2(0.5,0.5), 0.7854 * 4.0);\\n    t4_p1 = rotatePointAboutPoint(t0_p1, vec2(0.5,0.5), 0.7854 * 4.0);\\n    t4_p2 = rotatePointAboutPoint(t0_p2, vec2(0.5,0.5), 0.7854 * 4.0);\\n\\n    t5_p0 = rotatePointAboutPoint(t0_p0, vec2(0.5,0.5), 0.7854 * 5.0);\\n    t5_p1 = rotatePointAboutPoint(t0_p1, vec2(0.5,0.5), 0.7854 * 5.0);\\n    t5_p2 = rotatePointAboutPoint(t0_p2, vec2(0.5,0.5), 0.7854 * 5.0);\\n\\n    t6_p0 = rotatePointAboutPoint(t0_p0, vec2(0.5,0.5), 0.7854 * 6.0);\\n    t6_p1 = rotatePointAboutPoint(t0_p1, vec2(0.5,0.5), 0.7854 * 6.0);\\n    t6_p2 = rotatePointAboutPoint(t0_p2, vec2(0.5,0.5), 0.7854 * 6.0);\\n\\n    t7_p0 = rotatePointAboutPoint(t0_p0, vec2(0.5,0.5), 0.7854 * 7.0);\\n    t7_p1 = rotatePointAboutPoint(t0_p1, vec2(0.5,0.5), 0.7854 * 7.0);\\n    t7_p2 = rotatePointAboutPoint(t0_p2, vec2(0.5,0.5), 0.7854 * 7.0);\\n\\n    if(mix > 0.99){\\n        gl_FragColor = color_a;\\n        return;\\n    }\\n    if(mix < 0.01){\\n        gl_FragColor = color_b;\\n        return;\\n    }\\n    if(pointInTriangle(v_texCoord, t0_p0, t0_p1, t0_p2) || pointInTriangle(v_texCoord, t1_p0, t1_p1, t1_p2) || pointInTriangle(v_texCoord, t2_p0, t2_p1, t2_p2) || pointInTriangle(v_texCoord, t3_p0, t3_p1, t3_p2) || pointInTriangle(v_texCoord, t4_p0, t4_p1, t4_p2) || pointInTriangle(v_texCoord, t5_p0, t5_p1, t5_p2) || pointInTriangle(v_texCoord, t6_p0, t6_p1, t6_p2) || pointInTriangle(v_texCoord, t7_p0, t7_p1, t7_p2)){\\n        gl_FragColor = color_a;\\n    } else {\\n        gl_FragColor = color_b;\\n    }\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/starWipe/starWipe.js\":\n/*!**********************************************!*\\\n  !*** ./src/Definitions/starWipe/starWipe.js ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_54381__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _starWipe = __nested_webpack_require_54381__(/*! ./starWipe.vert */ \"./src/Definitions/starWipe/starWipe.vert\");\n\nvar _starWipe2 = _interopRequireDefault(_starWipe);\n\nvar _starWipe3 = __nested_webpack_require_54381__(/*! ./starWipe.frag */ \"./src/Definitions/starWipe/starWipe.frag\");\n\nvar _starWipe4 = _interopRequireDefault(_starWipe3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar starWipe = {\n    title: \"Star Wipe Fade\",\n    description: \"A classic star wipe transistion. Typically used as a transistion.\",\n    vertexShader: _starWipe2.default,\n    fragmentShader: _starWipe4.default,\n    properties: {\n        mix: { type: \"uniform\", value: 1.0 }\n    },\n    inputs: [\"u_image_a\", \"u_image_b\"]\n};\n\nexports.default = starWipe;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/starWipe/starWipe.vert\":\n/*!************************************************!*\\\n  !*** ./src/Definitions/starWipe/starWipe.vert ***!\n  \\************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/staticDissolve/staticDissolve.frag\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/staticDissolve/staticDissolve.frag ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image_a;\\nuniform sampler2D u_image_b;\\nuniform float mix;\\nuniform float currentTime;\\nvarying vec2 v_texCoord;\\nvarying float v_mix;\\nfloat rand(vec2 co, float currentTime){\\n    return fract(sin(dot(co.xy,vec2(12.9898,78.233))+currentTime) * 43758.5453);\\n}\\nvoid main(){\\n    vec4 color_a = texture2D(u_image_a, v_texCoord);\\n    vec4 color_b = texture2D(u_image_b, v_texCoord);\\n    if (clamp(rand(v_texCoord, currentTime),  0.01, 1.001) > mix){\\n        gl_FragColor = color_a;\\n    } else {\\n        gl_FragColor = color_b;\\n    }\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/staticDissolve/staticDissolve.js\":\n/*!**********************************************************!*\\\n  !*** ./src/Definitions/staticDissolve/staticDissolve.js ***!\n  \\**********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_57078__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _staticDissolve = __nested_webpack_require_57078__(/*! ./staticDissolve.vert */ \"./src/Definitions/staticDissolve/staticDissolve.vert\");\n\nvar _staticDissolve2 = _interopRequireDefault(_staticDissolve);\n\nvar _staticDissolve3 = __nested_webpack_require_57078__(/*! ./staticDissolve.frag */ \"./src/Definitions/staticDissolve/staticDissolve.frag\");\n\nvar _staticDissolve4 = _interopRequireDefault(_staticDissolve3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar staticDissolve = {\n    title: \"Static Dissolve\",\n    description: \"A static dissolve effect. Typically used as a transistion.\",\n    vertexShader: _staticDissolve2.default,\n    fragmentShader: _staticDissolve4.default,\n    properties: {\n        mix: { type: \"uniform\", value: 0.0 }\n    },\n    inputs: [\"u_image_a\", \"u_image_b\"]\n};\n\nexports.default = staticDissolve;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/staticDissolve/staticDissolve.vert\":\n/*!************************************************************!*\\\n  !*** ./src/Definitions/staticDissolve/staticDissolve.vert ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/staticEffect/staticEffect.frag\":\n/*!********************************************************!*\\\n  !*** ./src/Definitions/staticEffect/staticEffect.frag ***!\n  \\********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image;\\nuniform float currentTime;\\nuniform float amount;\\nvarying vec2 v_texCoord;\\nuniform vec3 weight;\\nfloat rand(vec2 co, float currentTime){\\n    return fract(sin(dot(co.xy,vec2(12.9898,78.233))+currentTime) * 43758.5453);\\n}\\nvoid main(){\\n    vec4 color = texture2D(u_image, v_texCoord);\\n    color[0] = color[0] + (2.0*(clamp(rand(v_texCoord, currentTime),  0.01, 1.001)-0.5)) * weight[0] * amount;\\n    color[1] = color[1] + (2.0*(clamp(rand(v_texCoord, currentTime),  0.01, 1.001)-0.5)) * weight[1] * amount;\\n    color[2] = color[2] + (2.0*(clamp(rand(v_texCoord, currentTime),  0.01, 1.001)-0.5)) * weight[2] *amount;\\n    gl_FragColor = color;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/staticEffect/staticEffect.js\":\n/*!******************************************************!*\\\n  !*** ./src/Definitions/staticEffect/staticEffect.js ***!\n  \\******************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_60001__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _staticEffect = __nested_webpack_require_60001__(/*! ./staticEffect.vert */ \"./src/Definitions/staticEffect/staticEffect.vert\");\n\nvar _staticEffect2 = _interopRequireDefault(_staticEffect);\n\nvar _staticEffect3 = __nested_webpack_require_60001__(/*! ./staticEffect.frag */ \"./src/Definitions/staticEffect/staticEffect.frag\");\n\nvar _staticEffect4 = _interopRequireDefault(_staticEffect3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar staticEffect = {\n    title: \"Static\",\n    description: \"A static effect to add pseudo random noise to a video\",\n    vertexShader: _staticEffect2.default,\n    fragmentShader: _staticEffect4.default,\n    properties: {\n        weight: { type: \"uniform\", value: [1.0, 1.0, 1.0] },\n        amount: { type: \"uniform\", value: 1.0 }\n    },\n    inputs: [\"u_image\"]\n};\n\nexports.default = staticEffect;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/staticEffect/staticEffect.vert\":\n/*!********************************************************!*\\\n  !*** ./src/Definitions/staticEffect/staticEffect.vert ***!\n  \\********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/toColorAndBackFade/toColorAndBackFade.frag\":\n/*!********************************************************************!*\\\n  !*** ./src/Definitions/toColorAndBackFade/toColorAndBackFade.frag ***!\n  \\********************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image_a;\\nuniform sampler2D u_image_b;\\nuniform float mix;\\nuniform vec4 color;\\nvarying vec2 v_texCoord;\\nvarying float v_mix;\\nvoid main(){\\n    vec4 color_a = texture2D(u_image_a, v_texCoord);\\n    vec4 color_b = texture2D(u_image_b, v_texCoord);\\n    float mix_amount = (mix *2.0) - 1.0;\\n    if(mix_amount < 0.0){\\n        gl_FragColor = abs(mix_amount) * color_a + (1.0 - abs(mix_amount)) * color;\\n    } else {\\n        gl_FragColor = mix_amount * color_b + (1.0 - mix_amount) * color;\\n    }\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/toColorAndBackFade/toColorAndBackFade.js\":\n/*!******************************************************************!*\\\n  !*** ./src/Definitions/toColorAndBackFade/toColorAndBackFade.js ***!\n  \\******************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_62849__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toColorAndBackFade = __nested_webpack_require_62849__(/*! ./toColorAndBackFade.vert */ \"./src/Definitions/toColorAndBackFade/toColorAndBackFade.vert\");\n\nvar _toColorAndBackFade2 = _interopRequireDefault(_toColorAndBackFade);\n\nvar _toColorAndBackFade3 = __nested_webpack_require_62849__(/*! ./toColorAndBackFade.frag */ \"./src/Definitions/toColorAndBackFade/toColorAndBackFade.frag\");\n\nvar _toColorAndBackFade4 = _interopRequireDefault(_toColorAndBackFade3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar toColorAndBackFade = {\n    title: \"To Color And Back Fade\",\n    description: \"A fade to black and back effect. Setting mix to 0.5 is a fully solid color frame. Typically used as a transistion.\",\n    vertexShader: _toColorAndBackFade2.default,\n    fragmentShader: _toColorAndBackFade4.default,\n    properties: {\n        mix: { type: \"uniform\", value: 0.0 },\n        color: { type: \"uniform\", value: [0.0, 0.0, 0.0, 0.0] }\n    },\n    inputs: [\"u_image_a\", \"u_image_b\"]\n};\nexports.default = toColorAndBackFade;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/toColorAndBackFade/toColorAndBackFade.vert\":\n/*!********************************************************************!*\\\n  !*** ./src/Definitions/toColorAndBackFade/toColorAndBackFade.vert ***!\n  \\********************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/verticalBlur/verticalBlur.frag\":\n/*!********************************************************!*\\\n  !*** ./src/Definitions/verticalBlur/verticalBlur.frag ***!\n  \\********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texCoord;\\nvarying vec2 v_blurTexCoords[14];\\nvoid main(){\\n    gl_FragColor = vec4(0.0);\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 0])*0.0044299121055113265;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 1])*0.00895781211794;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 2])*0.0215963866053;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 3])*0.0443683338718;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 4])*0.0776744219933;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 5])*0.115876621105;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 6])*0.147308056121;\\n    gl_FragColor += texture2D(u_image, v_texCoord         )*0.159576912161;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 7])*0.147308056121;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 8])*0.115876621105;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[ 9])*0.0776744219933;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[10])*0.0443683338718;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[11])*0.0215963866053;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[12])*0.00895781211794;\\n    gl_FragColor += texture2D(u_image, v_blurTexCoords[13])*0.0044299121055113265;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/verticalBlur/verticalBlur.js\":\n/*!******************************************************!*\\\n  !*** ./src/Definitions/verticalBlur/verticalBlur.js ***!\n  \\******************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_66629__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _verticalBlur = __nested_webpack_require_66629__(/*! ./verticalBlur.vert */ \"./src/Definitions/verticalBlur/verticalBlur.vert\");\n\nvar _verticalBlur2 = _interopRequireDefault(_verticalBlur);\n\nvar _verticalBlur3 = __nested_webpack_require_66629__(/*! ./verticalBlur.frag */ \"./src/Definitions/verticalBlur/verticalBlur.frag\");\n\nvar _verticalBlur4 = _interopRequireDefault(_verticalBlur3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar verticalBlur = {\n    title: \"Vertical Blur\",\n    description: \"A vertical blur effect. Adpated from http://xissburg.com/faster-gaussian-blur-in-glsl/\",\n    vertexShader: _verticalBlur2.default,\n    fragmentShader: _verticalBlur4.default,\n    properties: {\n        blurAmount: { type: \"uniform\", value: 1.0 }\n    },\n    inputs: [\"u_image\"]\n};\n\nexports.default = verticalBlur;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/verticalBlur/verticalBlur.vert\":\n/*!********************************************************!*\\\n  !*** ./src/Definitions/verticalBlur/verticalBlur.vert ***!\n  \\********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nuniform float blurAmount;\\nvarying vec2 v_blurTexCoords[14];\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n    v_blurTexCoords[ 0] = v_texCoord + vec2(0.0,-0.028 * blurAmount);\\n    v_blurTexCoords[ 1] = v_texCoord + vec2(0.0,-0.024 * blurAmount);\\n    v_blurTexCoords[ 2] = v_texCoord + vec2(0.0,-0.020 * blurAmount);\\n    v_blurTexCoords[ 3] = v_texCoord + vec2(0.0,-0.016 * blurAmount);\\n    v_blurTexCoords[ 4] = v_texCoord + vec2(0.0,-0.012 * blurAmount);\\n    v_blurTexCoords[ 5] = v_texCoord + vec2(0.0,-0.008 * blurAmount);\\n    v_blurTexCoords[ 6] = v_texCoord + vec2(0.0,-0.004 * blurAmount);\\n    v_blurTexCoords[ 7] = v_texCoord + vec2(0.0, 0.004 * blurAmount);\\n    v_blurTexCoords[ 8] = v_texCoord + vec2(0.0, 0.008 * blurAmount);\\n    v_blurTexCoords[ 9] = v_texCoord + vec2(0.0, 0.012 * blurAmount);\\n    v_blurTexCoords[10] = v_texCoord + vec2(0.0, 0.016 * blurAmount);\\n    v_blurTexCoords[11] = v_texCoord + vec2(0.0, 0.020 * blurAmount);\\n    v_blurTexCoords[12] = v_texCoord + vec2(0.0, 0.024 * blurAmount);\\n    v_blurTexCoords[13] = v_texCoord + vec2(0.0, 0.028 * blurAmount);\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/verticalWipe/verticalWipe.frag\":\n/*!********************************************************!*\\\n  !*** ./src/Definitions/verticalWipe/verticalWipe.frag ***!\n  \\********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image_a;\\nuniform sampler2D u_image_b;\\nuniform float mix;\\nvarying vec2 v_texCoord;\\nvarying float v_mix;\\nvoid main(){\\n    vec4 color_a = texture2D(u_image_a, v_texCoord);\\n    vec4 color_b = texture2D(u_image_b, v_texCoord);\\n    if (v_texCoord[1] > mix){\\n        gl_FragColor = color_a;\\n    } else {\\n        gl_FragColor = color_b;\\n    }\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/Definitions/verticalWipe/verticalWipe.js\":\n/*!******************************************************!*\\\n  !*** ./src/Definitions/verticalWipe/verticalWipe.js ***!\n  \\******************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_70267__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _verticalWipe = __nested_webpack_require_70267__(/*! ./verticalWipe.vert */ \"./src/Definitions/verticalWipe/verticalWipe.vert\");\n\nvar _verticalWipe2 = _interopRequireDefault(_verticalWipe);\n\nvar _verticalWipe3 = __nested_webpack_require_70267__(/*! ./verticalWipe.frag */ \"./src/Definitions/verticalWipe/verticalWipe.frag\");\n\nvar _verticalWipe4 = _interopRequireDefault(_verticalWipe3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar verticalWipe = {\n    title: \"vertical Wipe\",\n    description: \"A vertical wipe effect. Typically used as a transistion.\",\n    vertexShader: _verticalWipe2.default,\n    fragmentShader: _verticalWipe4.default,\n    properties: {\n        mix: { type: \"uniform\", value: 0.0 }\n    },\n    inputs: [\"u_image_a\", \"u_image_b\"]\n};\n\nexports.default = verticalWipe;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/Definitions/verticalWipe/verticalWipe.vert\":\n/*!********************************************************!*\\\n  !*** ./src/Definitions/verticalWipe/verticalWipe.vert ***!\n  \\********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/DestinationNode/destinationnode.frag\":\n/*!**************************************************!*\\\n  !*** ./src/DestinationNode/destinationnode.frag ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texCoord;\\nvarying float v_progress;\\nvoid main(){\\n    gl_FragColor = texture2D(u_image, v_texCoord);\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/DestinationNode/destinationnode.js\":\n/*!************************************************!*\\\n  !*** ./src/DestinationNode/destinationnode.js ***!\n  \\************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_72558__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.DESTINATIONTYPE = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _processingnode = __nested_webpack_require_72558__(/*! ../ProcessingNodes/processingnode */ \"./src/ProcessingNodes/processingnode.js\");\n\nvar _processingnode2 = _interopRequireDefault(_processingnode);\n\nvar _destinationnode = __nested_webpack_require_72558__(/*! ./destinationnode.frag */ \"./src/DestinationNode/destinationnode.frag\");\n\nvar _destinationnode2 = _interopRequireDefault(_destinationnode);\n\nvar _destinationnode3 = __nested_webpack_require_72558__(/*! ./destinationnode.vert */ \"./src/DestinationNode/destinationnode.vert\");\n\nvar _destinationnode4 = _interopRequireDefault(_destinationnode3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //Matthew Shotton, R&D User Experience,© BBC 2015\n\n\nvar TYPE = \"DestinationNode\";\n\nvar DestinationNode = function (_ProcessingNode) {\n    _inherits(DestinationNode, _ProcessingNode);\n\n    /**\n     * Initialise an instance of a DestinationNode.\n     *\n     * There should only be a single instance of a DestinationNode per VideoContext instance. An VideoContext's destination can be accessed like so: videoContext.desitnation.\n     *\n     * You should not instantiate this directly.\n     */\n    function DestinationNode(gl, renderGraph) {\n        _classCallCheck(this, DestinationNode);\n\n        var definition = {\n            fragmentShader: _destinationnode2.default,\n            vertexShader: _destinationnode4.default,\n            properties: {},\n            inputs: [\"u_image\"]\n        };\n\n        var _this = _possibleConstructorReturn(this, (DestinationNode.__proto__ || Object.getPrototypeOf(DestinationNode)).call(this, gl, renderGraph, definition, definition.inputs, false));\n\n        _this._displayName = TYPE;\n        return _this;\n    }\n\n    _createClass(DestinationNode, [{\n        key: \"_render\",\n        value: function _render() {\n            var _this2 = this;\n\n            var gl = this._gl;\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n            gl.enable(gl.BLEND);\n            gl.clearColor(0, 0, 0, 0.0); // green;\n            gl.clear(gl.COLOR_BUFFER_BIT);\n\n            this.inputs.forEach(function (node) {\n                _get(DestinationNode.prototype.__proto__ || Object.getPrototypeOf(DestinationNode.prototype), \"_render\", _this2).call(_this2);\n                //map the input textures input the node\n                var texture = node._texture;\n\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = _this2._shaderInputsTextureUnitMapping[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var mapping = _step.value;\n\n                        gl.activeTexture(mapping.textureUnit);\n                        gl.uniform1i(mapping.location, mapping.textureUnitIndex);\n                        gl.bindTexture(gl.TEXTURE_2D, texture);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                gl.drawArrays(gl.TRIANGLES, 0, 6);\n            });\n        }\n    }]);\n\n    return DestinationNode;\n}(_processingnode2.default);\n\nexports.DESTINATIONTYPE = TYPE;\nexports.default = DestinationNode;\n\n/***/ }),\n\n/***/ \"./src/DestinationNode/destinationnode.vert\":\n/*!**************************************************!*\\\n  !*** ./src/DestinationNode/destinationnode.vert ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec2 a_position;\\nattribute vec2 a_texCoord;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n    gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\n    v_texCoord = a_texCoord;\\n}\\n\"\n\n/***/ }),\n\n/***/ \"./src/ProcessingNodes/compositingnode.js\":\n/*!************************************************!*\\\n  !*** ./src/ProcessingNodes/compositingnode.js ***!\n  \\************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_79283__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.COMPOSITINGTYPE = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _processingnode = __nested_webpack_require_79283__(/*! ./processingnode */ \"./src/ProcessingNodes/processingnode.js\");\n\nvar _processingnode2 = _interopRequireDefault(_processingnode);\n\nvar _utils = __nested_webpack_require_79283__(/*! ../utils.js */ \"./src/utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //Matthew Shotton, R&D User Experience,© BBC 2015\n\n\nvar TYPE = \"CompositingNode\";\n\nvar CompositingNode = function (_ProcessingNode) {\n    _inherits(CompositingNode, _ProcessingNode);\n\n    /**\n     * Initialise an instance of a Compositing Node. You should not instantiate this directly, but use VideoContest.createCompositingNode().\n     */\n    function CompositingNode(gl, renderGraph, definition) {\n        _classCallCheck(this, CompositingNode);\n\n        var placeholderTexture = (0, _utils.createElementTexture)(gl);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 0, 0]));\n\n        var _this = _possibleConstructorReturn(this, (CompositingNode.__proto__ || Object.getPrototypeOf(CompositingNode)).call(this, gl, renderGraph, definition, definition.inputs, false));\n\n        _this._placeholderTexture = placeholderTexture;\n        _this._displayName = TYPE;\n        return _this;\n    }\n\n    _createClass(CompositingNode, [{\n        key: \"_render\",\n        value: function _render() {\n            var _this2 = this;\n\n            var gl = this._gl;\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._texture, 0);\n            gl.clearColor(0, 0, 0, 0); // green;\n            gl.clear(gl.COLOR_BUFFER_BIT);\n            gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\n            this.inputs.forEach(function (node) {\n                if (node === undefined) return;\n                _get(CompositingNode.prototype.__proto__ || Object.getPrototypeOf(CompositingNode.prototype), \"_render\", _this2).call(_this2);\n\n                //map the input textures input the node\n                var texture = node._texture;\n\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = _this2._shaderInputsTextureUnitMapping[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var mapping = _step.value;\n\n                        gl.activeTexture(mapping.textureUnit);\n                        gl.uniform1i(mapping.location, mapping.textureUnitIndex);\n                        gl.bindTexture(gl.TEXTURE_2D, texture);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                gl.drawArrays(gl.TRIANGLES, 0, 6);\n            });\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        }\n    }]);\n\n    return CompositingNode;\n}(_processingnode2.default);\n\nexports.COMPOSITINGTYPE = TYPE;\nexports.default = CompositingNode;\n\n/***/ }),\n\n/***/ \"./src/ProcessingNodes/effectnode.js\":\n/*!*******************************************!*\\\n  !*** ./src/ProcessingNodes/effectnode.js ***!\n  \\*******************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_85270__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.EFFECTYPE = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _processingnode = __nested_webpack_require_85270__(/*! ./processingnode */ \"./src/ProcessingNodes/processingnode.js\");\n\nvar _processingnode2 = _interopRequireDefault(_processingnode);\n\nvar _utils = __nested_webpack_require_85270__(/*! ../utils.js */ \"./src/utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //Matthew Shotton, R&D User Experience,© BBC 2015\n\n\nvar TYPE = \"EffectNode\";\n\nvar EffectNode = function (_ProcessingNode) {\n    _inherits(EffectNode, _ProcessingNode);\n\n    /**\n     * Initialise an instance of an EffectNode. You should not instantiate this directly, but use VideoContest.createEffectNode().\n     */\n    function EffectNode(gl, renderGraph, definition) {\n        _classCallCheck(this, EffectNode);\n\n        var placeholderTexture = (0, _utils.createElementTexture)(gl);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 0, 0]));\n\n        var _this = _possibleConstructorReturn(this, (EffectNode.__proto__ || Object.getPrototypeOf(EffectNode)).call(this, gl, renderGraph, definition, definition.inputs, true));\n\n        _this._placeholderTexture = placeholderTexture;\n        _this._displayName = TYPE;\n        return _this;\n    }\n\n    _createClass(EffectNode, [{\n        key: \"_render\",\n        value: function _render() {\n            var gl = this._gl;\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._texture, 0);\n            gl.clearColor(0, 0, 0, 0); // green;\n            gl.clear(gl.COLOR_BUFFER_BIT);\n            gl.blendFunc(gl.ONE, gl.ZERO);\n\n            _get(EffectNode.prototype.__proto__ || Object.getPrototypeOf(EffectNode.prototype), \"_render\", this).call(this);\n\n            var inputs = this._renderGraph.getInputsForNode(this);\n\n            for (var i = 0; i < this._shaderInputsTextureUnitMapping.length; i++) {\n                var inputTexture = this._placeholderTexture;\n                var textureUnit = this._shaderInputsTextureUnitMapping[i].textureUnit;\n                if (i < inputs.length && inputs[i] !== undefined) {\n                    inputTexture = inputs[i]._texture;\n                }\n\n                gl.activeTexture(textureUnit);\n                gl.uniform1i(this._shaderInputsTextureUnitMapping[i].location, this._shaderInputsTextureUnitMapping[i].textureUnitIndex);\n                gl.bindTexture(gl.TEXTURE_2D, inputTexture);\n            }\n            gl.drawArrays(gl.TRIANGLES, 0, 6);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        }\n    }]);\n\n    return EffectNode;\n}(_processingnode2.default);\n\nexports.EFFECTYPE = TYPE;\nexports.default = EffectNode;\n\n/***/ }),\n\n/***/ \"./src/ProcessingNodes/processingnode.js\":\n/*!***********************************************!*\\\n  !*** ./src/ProcessingNodes/processingnode.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_90384__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.PROCESSINGTYPE = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _graphnode = __nested_webpack_require_90384__(/*! ../graphnode */ \"./src/graphnode.js\");\n\nvar _graphnode2 = _interopRequireDefault(_graphnode);\n\nvar _utils = __nested_webpack_require_90384__(/*! ../utils.js */ \"./src/utils.js\");\n\nvar _exceptions = __nested_webpack_require_90384__(/*! ../exceptions.js */ \"./src/exceptions.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //Matthew Shotton, R&D User Experience,© BBC 2015\n\n\nvar TYPE = \"ProcessingNode\";\n\nvar ProcessingNode = function (_GraphNode) {\n    _inherits(ProcessingNode, _GraphNode);\n\n    /**\n     * Initialise an instance of a ProcessingNode.\n     *\n     * This class is not used directly, but is extended to create CompositingNodes, TransitionNodes, and EffectNodes.\n     */\n    function ProcessingNode(gl, renderGraph, definition, inputNames, limitConnections) {\n        _classCallCheck(this, ProcessingNode);\n\n        var _this = _possibleConstructorReturn(this, (ProcessingNode.__proto__ || Object.getPrototypeOf(ProcessingNode)).call(this, gl, renderGraph, inputNames, limitConnections));\n\n        _this._vertexShader = (0, _utils.compileShader)(gl, definition.vertexShader, gl.VERTEX_SHADER);\n        _this._fragmentShader = (0, _utils.compileShader)(gl, definition.fragmentShader, gl.FRAGMENT_SHADER);\n        _this._definition = definition;\n        _this._properties = {}; //definition.properties;\n        //copy definition properties\n        for (var propertyName in definition.properties) {\n            var propertyValue = definition.properties[propertyName].value;\n            //if an array then shallow copy it\n            if (Object.prototype.toString.call(propertyValue) === \"[object Array]\") {\n                propertyValue = definition.properties[propertyName].value.slice();\n            }\n            var propertyType = definition.properties[propertyName].type;\n            _this._properties[propertyName] = {\n                type: propertyType,\n                value: propertyValue\n            };\n        }\n\n        _this._shaderInputsTextureUnitMapping = [];\n        _this._maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n        _this._boundTextureUnits = 0;\n        _this._texture = (0, _utils.createElementTexture)(gl);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.canvas.width, gl.canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        //compile the shader\n        _this._program = (0, _utils.createShaderProgram)(gl, _this._vertexShader, _this._fragmentShader);\n\n        //create and setup the framebuffer\n        _this._framebuffer = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, _this._framebuffer);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, _this._texture, 0);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        //create properties on this object for the passed properties\n\n        var _loop = function _loop(_propertyName) {\n            Object.defineProperty(_this, _propertyName, {\n                get: function get() {\n                    return this._properties[_propertyName].value;\n                },\n                set: function set(passedValue) {\n                    this._properties[_propertyName].value = passedValue;\n                }\n            });\n        };\n\n        for (var _propertyName in _this._properties) {\n            _loop(_propertyName);\n        }\n\n        //create texutres for any texture properties\n        for (var _propertyName2 in _this._properties) {\n            var _propertyValue = _this._properties[_propertyName2].value;\n            if (_propertyValue instanceof Image) {\n                _this._properties[_propertyName2].texture = (0, _utils.createElementTexture)(gl);\n                _this._properties[_propertyName2].textureUnit = gl.TEXTURE0 + _this._boundTextureUnits;\n                _this._properties[_propertyName2].textureUnitIndex = _this._boundTextureUnits;\n                _this._boundTextureUnits += 1;\n                if (_this._boundTextureUnits > _this._maxTextureUnits) {\n                    throw new _exceptions.RenderException(\"Trying to bind more than available textures units to shader\");\n                }\n            }\n        }\n\n        // calculate texture units for input textures\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = definition.inputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var inputName = _step.value;\n\n                _this._shaderInputsTextureUnitMapping.push({\n                    name: inputName,\n                    textureUnit: gl.TEXTURE0 + _this._boundTextureUnits,\n                    textureUnitIndex: _this._boundTextureUnits,\n                    location: gl.getUniformLocation(_this._program, inputName)\n                });\n                _this._boundTextureUnits += 1;\n                if (_this._boundTextureUnits > _this._maxTextureUnits) {\n                    throw new _exceptions.RenderException(\"Trying to bind more than available textures units to shader\");\n                }\n            }\n\n            //find the locations of the properties in the compiled shader\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        for (var _propertyName3 in _this._properties) {\n            if (_this._properties[_propertyName3].type === \"uniform\") {\n                _this._properties[_propertyName3].location = _this._gl.getUniformLocation(_this._program, _propertyName3);\n            }\n        }\n        _this._currentTimeLocation = _this._gl.getUniformLocation(_this._program, \"currentTime\");\n        _this._currentTime = 0;\n\n        //Other setup\n        var positionLocation = gl.getAttribLocation(_this._program, \"a_position\");\n        var buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        gl.enableVertexAttribArray(positionLocation);\n        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0]), gl.STATIC_DRAW);\n        var texCoordLocation = gl.getAttribLocation(_this._program, \"a_texCoord\");\n        gl.enableVertexAttribArray(texCoordLocation);\n        gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n        _this._displayName = TYPE;\n        return _this;\n    }\n\n    /**\n     * Sets the passed processing node property to the passed value.\n     * @param {string} name - The name of the processing node parameter to modify.\n     * @param {Object} value - The value to set it to.\n     *\n     * @example\n     * var ctx = new VideoContext();\n     * var monoNode = ctx.effect(VideoContext.DEFINITIONS.MONOCHROME);\n     * monoNode.setProperty(\"inputMix\", [1.0,0.0,0.0]); //Just use red channel\n     */\n\n\n    _createClass(ProcessingNode, [{\n        key: \"setProperty\",\n        value: function setProperty(name, value) {\n            this._properties[name].value = value;\n        }\n\n        /**\n         * Sets the passed processing node property to the passed value.\n         * @param {string} name - The name of the processing node parameter to get.\n         *\n         * @example\n         * var ctx = new VideoContext();\n         * var monoNode = ctx.effect(VideoContext.DEFINITIONS.MONOCHROME);\n         * console.log(monoNode.getProperty(\"inputMix\")); //Will output [0.4,0.6,0.2], the default value from the effect definition.\n         *\n         */\n\n    }, {\n        key: \"getProperty\",\n        value: function getProperty(name) {\n            return this._properties[name].value;\n        }\n\n        /**\n         * Destroy and clean-up the node.\n         */\n\n    }, {\n        key: \"destroy\",\n        value: function destroy() {\n            _get(ProcessingNode.prototype.__proto__ || Object.getPrototypeOf(ProcessingNode.prototype), \"destroy\", this).call(this);\n            //destrpy texutres for any texture properties\n            for (var propertyName in this._properties) {\n                var propertyValue = this._properties[propertyName].value;\n                if (propertyValue instanceof Image) {\n                    this._gl.deleteTexture(this._properties[propertyName].texture);\n                    this._texture = undefined;\n                }\n            }\n            //Destroy main\n            this._gl.deleteTexture(this._texture);\n            this._texture = undefined;\n            //Detach shaders\n            this._gl.detachShader(this._program, this._vertexShader);\n            this._gl.detachShader(this._program, this._fragmentShader);\n            //Delete shaders\n            this._gl.deleteShader(this._vertexShader);\n            this._gl.deleteShader(this._fragmentShader);\n            //Delete program\n            this._gl.deleteProgram(this._program);\n            //Delete Framebuffer\n            this._gl.deleteFramebuffer(this._framebuffer);\n        }\n    }, {\n        key: \"_update\",\n        value: function _update(currentTime) {\n            this._currentTime = currentTime;\n        }\n    }, {\n        key: \"_seek\",\n        value: function _seek(currentTime) {\n            this._currentTime = currentTime;\n        }\n    }, {\n        key: \"_render\",\n        value: function _render() {\n            this._rendered = true;\n            var gl = this._gl;\n            gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n            gl.useProgram(this._program);\n\n            //upload the default uniforms\n            gl.uniform1f(this._currentTimeLocation, parseFloat(this._currentTime));\n\n            for (var propertyName in this._properties) {\n                var propertyValue = this._properties[propertyName].value;\n                var propertyType = this._properties[propertyName].type;\n                var propertyLocation = this._properties[propertyName].location;\n                if (propertyType !== \"uniform\") continue;\n\n                if (typeof propertyValue === \"number\") {\n                    gl.uniform1f(propertyLocation, propertyValue);\n                } else if (Object.prototype.toString.call(propertyValue) === \"[object Array]\") {\n                    if (propertyValue.length === 1) {\n                        gl.uniform1fv(propertyLocation, propertyValue);\n                    } else if (propertyValue.length === 2) {\n                        gl.uniform2fv(propertyLocation, propertyValue);\n                    } else if (propertyValue.length === 3) {\n                        gl.uniform3fv(propertyLocation, propertyValue);\n                    } else if (propertyValue.length === 4) {\n                        gl.uniform4fv(propertyLocation, propertyValue);\n                    } else {\n                        console.debug(\"Shader parameter\", propertyName, \"is too long an array:\", propertyValue);\n                    }\n                } else if (propertyValue instanceof Image) {\n                    var texture = this._properties[propertyName].texture;\n                    var textureUnit = this._properties[propertyName].textureUnit;\n                    var textureUnitIndex = this._properties[propertyName].textureUnit;\n                    (0, _utils.updateTexture)(gl, texture, propertyValue);\n\n                    gl.activeTexture(textureUnit);\n                    gl.uniform1i(propertyLocation, textureUnitIndex);\n                    gl.bindTexture(gl.TEXTURE_2D, texture);\n                } else {\n                    //TODO - add tests for textures\n                    /*gl.activeTexture(gl.TEXTURE0 + textureOffset);\n                    gl.uniform1i(parameterLoctation, textureOffset);\n                    gl.bindTexture(gl.TEXTURE_2D, textures[textureOffset-1]);*/\n                }\n            }\n        }\n    }]);\n\n    return ProcessingNode;\n}(_graphnode2.default);\n\nexports.PROCESSINGTYPE = TYPE;\nexports.default = ProcessingNode;\n\n/***/ }),\n\n/***/ \"./src/ProcessingNodes/transitionnode.js\":\n/*!***********************************************!*\\\n  !*** ./src/ProcessingNodes/transitionnode.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_105039__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.TRANSITIONTYPE = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _effectnode = __nested_webpack_require_105039__(/*! ./effectnode */ \"./src/ProcessingNodes/effectnode.js\");\n\nvar _effectnode2 = _interopRequireDefault(_effectnode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //Matthew Shotton, R&D User Experience,© BBC 2015\n\n\nvar TYPE = \"TransitionNode\";\n\nvar TransitionNode = function (_EffectNode) {\n    _inherits(TransitionNode, _EffectNode);\n\n    /**\n     * Initialise an instance of a TransitionNode. You should not instantiate this directly, but use VideoContest.createTransitonNode().\n     */\n    function TransitionNode(gl, renderGraph, definition) {\n        _classCallCheck(this, TransitionNode);\n\n        var _this = _possibleConstructorReturn(this, (TransitionNode.__proto__ || Object.getPrototypeOf(TransitionNode)).call(this, gl, renderGraph, definition));\n\n        _this._transitions = {};\n\n        //save a version of the original property values\n        _this._initialPropertyValues = {};\n        for (var propertyName in _this._properties) {\n            _this._initialPropertyValues[propertyName] = _this._properties[propertyName].value;\n        }\n        _this._displayName = TYPE;\n        return _this;\n    }\n\n    _createClass(TransitionNode, [{\n        key: \"_doesTransitionFitOnTimeline\",\n        value: function _doesTransitionFitOnTimeline(testTransition) {\n            if (this._transitions[testTransition.property] === undefined) return true;\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = this._transitions[testTransition.property][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var transition = _step.value;\n\n                    if (testTransition.start > transition.start && testTransition.start < transition.end) return false;\n                    if (testTransition.end > transition.start && testTransition.end < transition.end) return false;\n                    if (transition.start > testTransition.start && transition.start < testTransition.end) return false;\n                    if (transition.end > testTransition.start && transition.end < testTransition.end) return false;\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return true;\n        }\n    }, {\n        key: \"_insertTransitionInTimeline\",\n        value: function _insertTransitionInTimeline(transition) {\n            if (this._transitions[transition.property] === undefined) this._transitions[transition.property] = [];\n            this._transitions[transition.property].push(transition);\n\n            this._transitions[transition.property].sort(function (a, b) {\n                return a.start - b.start;\n            });\n        }\n\n        /**\n         * Create a transition on the timeline.\n         *\n         * @param {number} startTime - The time at which the transition should start (relative to currentTime of video context).\n         * @param {number} endTime - The time at which the transition should be completed by (relative to currentTime of video context).\n         * @param {number} currentValue - The value to start the transition at.\n         * @param {number} targetValue - The value to transition to by endTime.\n         * @param {String} propertyName - The name of the property to clear transitions on, if undefined default to \"mix\".\n         *\n         * @return {Boolean} returns True if a transition is successfully added, false otherwise.\n         */\n\n    }, {\n        key: \"transition\",\n        value: function transition(startTime, endTime, currentValue, targetValue) {\n            var propertyName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"mix\";\n\n            var transition = {\n                start: startTime + this._currentTime,\n                end: endTime + this._currentTime,\n                current: currentValue,\n                target: targetValue,\n                property: propertyName\n            };\n            if (!this._doesTransitionFitOnTimeline(transition)) return false;\n            this._insertTransitionInTimeline(transition);\n            return true;\n        }\n\n        /**\n         * Create a transition on the timeline at an absolute time.\n         *\n         * @param {number} startTime - The time at which the transition should start (relative to time 0).\n         * @param {number} endTime - The time at which the transition should be completed by (relative to time 0).\n         * @param {number} currentValue - The value to start the transition at.\n         * @param {number} targetValue - The value to transition to by endTime.\n         * @param {String} propertyName - The name of the property to clear transitions on, if undefined default to \"mix\".\n         *\n         * @return {Boolean} returns True if a transition is successfully added, false otherwise.\n         */\n\n    }, {\n        key: \"transitionAt\",\n        value: function transitionAt(startTime, endTime, currentValue, targetValue) {\n            var propertyName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"mix\";\n\n            var transition = {\n                start: startTime,\n                end: endTime,\n                current: currentValue,\n                target: targetValue,\n                property: propertyName\n            };\n            if (!this._doesTransitionFitOnTimeline(transition)) return false;\n            this._insertTransitionInTimeline(transition);\n            return true;\n        }\n\n        /**\n         * Clear all transistions on the passed property. If no property is defined clear all transitions on the node.\n         *\n         * @param {String} propertyName - The name of the property to clear transitions on, if undefined clear all transitions on the node.\n         */\n\n    }, {\n        key: \"clearTransitions\",\n        value: function clearTransitions(propertyName) {\n            if (propertyName === undefined) {\n                this._transitions = {};\n            } else {\n                this._transitions[propertyName] = [];\n            }\n        }\n\n        /**\n         * Clear a transistion on the passed property that the specified time lies within.\n         *\n         * @param {String} propertyName - The name of the property to clear a transition on.\n         * @param {number} time - A time which lies within the property you're trying to clear.\n         *\n         * @return {Boolean} returns True if a transition is removed, false otherwise.\n         */\n\n    }, {\n        key: \"clearTransition\",\n        value: function clearTransition(propertyName, time) {\n            var transitionIndex = undefined;\n            for (var i = 0; i < this._transitions[propertyName].length; i++) {\n                var transition = this._transitions[propertyName][i];\n                if (time > transition.start && time < transition.end) {\n                    transitionIndex = i;\n                }\n            }\n            if (transitionIndex !== undefined) {\n                this._transitions[propertyName].splice(transitionIndex, 1);\n                return true;\n            }\n            return false;\n        }\n    }, {\n        key: \"_update\",\n        value: function _update(currentTime) {\n            _get(TransitionNode.prototype.__proto__ || Object.getPrototypeOf(TransitionNode.prototype), \"_update\", this).call(this, currentTime);\n            for (var propertyName in this._transitions) {\n                var value = this[propertyName];\n                if (this._transitions[propertyName].length > 0) {\n                    value = this._transitions[propertyName][0].current;\n                }\n                var transitionActive = false;\n\n                for (var i = 0; i < this._transitions[propertyName].length; i++) {\n                    var transition = this._transitions[propertyName][i];\n                    if (currentTime > transition.end) {\n                        value = transition.target;\n                        continue;\n                    }\n\n                    if (currentTime > transition.start && currentTime < transition.end) {\n                        var difference = transition.target - transition.current;\n                        var progress = (this._currentTime - transition.start) / (transition.end - transition.start);\n                        transitionActive = true;\n                        this[propertyName] = transition.current + difference * progress;\n                        break;\n                    }\n                }\n\n                if (!transitionActive) this[propertyName] = value;\n            }\n        }\n    }]);\n\n    return TransitionNode;\n}(_effectnode2.default);\n\nexports.TRANSITIONTYPE = TYPE;\nexports.default = TransitionNode;\n\n/***/ }),\n\n/***/ \"./src/SourceNodes/audionode.js\":\n/*!**************************************!*\\\n  !*** ./src/SourceNodes/audionode.js ***!\n  \\**************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_116645__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.AUDIOTYPE = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _medianode = __nested_webpack_require_116645__(/*! ./medianode */ \"./src/SourceNodes/medianode.js\");\n\nvar _medianode2 = _interopRequireDefault(_medianode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //Matthew Shotton, R&D User Experience,© BBC 2015\n\n\nvar TYPE = \"AudioNode\";\n\nvar AudioNode = function (_MediaNode) {\n    _inherits(AudioNode, _MediaNode);\n\n    /**\n     * Initialise an instance of an AudioNode.\n     * This should not be called directly, but created through a call to videoContext.audio();\n     */\n    function AudioNode() {\n        _classCallCheck(this, AudioNode);\n\n        var _this = _possibleConstructorReturn(this, (AudioNode.__proto__ || Object.getPrototypeOf(AudioNode)).apply(this, arguments));\n\n        _this._displayName = TYPE;\n        _this._elementType = \"audio\";\n        return _this;\n    }\n\n    _createClass(AudioNode, [{\n        key: \"_update\",\n        value: function _update(currentTime) {\n            _get(AudioNode.prototype.__proto__ || Object.getPrototypeOf(AudioNode.prototype), \"_update\", this).call(this, currentTime, false);\n        }\n    }]);\n\n    return AudioNode;\n}(_medianode2.default);\n\nexports.AUDIOTYPE = TYPE;\nexports.default = AudioNode;\n\n/***/ }),\n\n/***/ \"./src/SourceNodes/canvasnode.js\":\n/*!***************************************!*\\\n  !*** ./src/SourceNodes/canvasnode.js ***!\n  \\***************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_120220__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.CANVASTYPE = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _sourcenode = __nested_webpack_require_120220__(/*! ./sourcenode */ \"./src/SourceNodes/sourcenode.js\");\n\nvar _sourcenode2 = _interopRequireDefault(_sourcenode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //Matthew Shotton, R&D User Experience,© BBC 2015\n\n\nvar TYPE = \"CanvasNode\";\n\nvar CanvasNode = function (_SourceNode) {\n    _inherits(CanvasNode, _SourceNode);\n\n    /**\n     * Initialise an instance of a CanvasNode.\n     * This should not be called directly, but created through a call to videoContext.createCanvasNode();\n     */\n    function CanvasNode(canvas, gl, renderGraph, currentTime) {\n        var preloadTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 4;\n\n        _classCallCheck(this, CanvasNode);\n\n        var _this = _possibleConstructorReturn(this, (CanvasNode.__proto__ || Object.getPrototypeOf(CanvasNode)).call(this, canvas, gl, renderGraph, currentTime));\n\n        _this._preloadTime = preloadTime;\n        _this._displayName = TYPE;\n        return _this;\n    }\n\n    _createClass(CanvasNode, [{\n        key: \"_load\",\n        value: function _load() {\n            _get(CanvasNode.prototype.__proto__ || Object.getPrototypeOf(CanvasNode.prototype), \"_load\", this).call(this);\n            this._ready = true;\n            this._triggerCallbacks(\"loaded\");\n        }\n    }, {\n        key: \"_unload\",\n        value: function _unload() {\n            _get(CanvasNode.prototype.__proto__ || Object.getPrototypeOf(CanvasNode.prototype), \"_unload\", this).call(this);\n            this._ready = false;\n        }\n    }, {\n        key: \"_seek\",\n        value: function _seek(time) {\n            _get(CanvasNode.prototype.__proto__ || Object.getPrototypeOf(CanvasNode.prototype), \"_seek\", this).call(this, time);\n            if (this.state === _sourcenode.SOURCENODESTATE.playing || this.state === _sourcenode.SOURCENODESTATE.paused) {\n                if (this._element === undefined) this._load();\n                this._ready = false;\n            }\n            if ((this._state === _sourcenode.SOURCENODESTATE.sequenced || this._state === _sourcenode.SOURCENODESTATE.ended) && this._element !== undefined) {\n                this._unload();\n            }\n        }\n    }, {\n        key: \"_update\",\n        value: function _update(currentTime) {\n            //if (!super._update(currentTime)) return false;\n            _get(CanvasNode.prototype.__proto__ || Object.getPrototypeOf(CanvasNode.prototype), \"_update\", this).call(this, currentTime);\n            if (this._startTime - this._currentTime <= this._preloadTime && this._state !== _sourcenode.SOURCENODESTATE.waiting && this._state !== _sourcenode.SOURCENODESTATE.ended) this._load();\n\n            if (this._state === _sourcenode.SOURCENODESTATE.playing) {\n                return true;\n            } else if (this._state === _sourcenode.SOURCENODESTATE.paused) {\n                return true;\n            } else if (this._state === _sourcenode.SOURCENODESTATE.ended && this._element !== undefined) {\n                this._unload();\n                return false;\n            }\n        }\n    }]);\n\n    return CanvasNode;\n}(_sourcenode2.default);\n\nexports.CANVASTYPE = TYPE;\nexports.default = CanvasNode;\n\n/***/ }),\n\n/***/ \"./src/SourceNodes/imagenode.js\":\n/*!**************************************!*\\\n  !*** ./src/SourceNodes/imagenode.js ***!\n  \\**************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_125791__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.IMAGETYPE = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _sourcenode = __nested_webpack_require_125791__(/*! ./sourcenode */ \"./src/SourceNodes/sourcenode.js\");\n\nvar _sourcenode2 = _interopRequireDefault(_sourcenode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //Matthew Shotton, R&D User Experience,© BBC 2015\n\n\nvar TYPE = \"CanvasNode\";\n\nvar ImageNode = function (_SourceNode) {\n    _inherits(ImageNode, _SourceNode);\n\n    /**\n     * Initialise an instance of an ImageNode.\n     * This should not be called directly, but created through a call to videoContext.createImageNode();\n     */\n    function ImageNode(src, gl, renderGraph, currentTime) {\n        var preloadTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 4;\n        var attributes = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n        _classCallCheck(this, ImageNode);\n\n        var _this = _possibleConstructorReturn(this, (ImageNode.__proto__ || Object.getPrototypeOf(ImageNode)).call(this, src, gl, renderGraph, currentTime));\n\n        _this._preloadTime = preloadTime;\n        _this._attributes = attributes;\n        _this._textureUploaded = false;\n        _this._displayName = TYPE;\n        return _this;\n    }\n\n    _createClass(ImageNode, [{\n        key: \"_load\",\n        value: function _load() {\n            var _this2 = this;\n\n            if (this._image !== undefined) {\n                for (var key in this._attributes) {\n                    this._image[key] = this._attributes[key];\n                }\n                return;\n            }\n            if (this._isResponsibleForElementLifeCycle) {\n                _get(ImageNode.prototype.__proto__ || Object.getPrototypeOf(ImageNode.prototype), \"_load\", this).call(this);\n                this._image = new Image();\n                this._image.setAttribute(\"crossorigin\", \"anonymous\");\n                // It's important to set the `onload` event before the `src` property\n                // https://stackoverflow.com/questions/12354865/image-onload-event-and-browser-cache?answertab=active#tab-top\n                this._image.onload = function () {\n                    _this2._ready = true;\n                    if (window.createImageBitmap) {\n                        window.createImageBitmap(_this2._image, { imageOrientation: \"flipY\" }).then(function (imageBitmap) {\n                            _this2._element = imageBitmap;\n                            _this2._triggerCallbacks(\"loaded\");\n                        });\n                    } else {\n                        _this2._element = _this2._image;\n                        _this2._triggerCallbacks(\"loaded\");\n                    }\n                };\n                this._image.src = this._elementURL;\n                this._image.onerror = function () {\n                    console.error(\"ImageNode failed to load. url:\", _this2._elementURL);\n                };\n\n                for (var _key in this._attributes) {\n                    this._image[_key] = this._attributes[_key];\n                }\n            }\n            this._image.onerror = function () {\n                console.debug(\"Error with element\", _this2._image);\n                _this2._state = _sourcenode.SOURCENODESTATE.error;\n                //Event though there's an error ready should be set to true so the node can output transparenn\n                _this2._ready = true;\n                _this2._triggerCallbacks(\"error\");\n            };\n        }\n    }, {\n        key: \"_unload\",\n        value: function _unload() {\n            _get(ImageNode.prototype.__proto__ || Object.getPrototypeOf(ImageNode.prototype), \"_unload\", this).call(this);\n            if (this._isResponsibleForElementLifeCycle) {\n                if (this._image !== undefined) {\n                    this._image.src = \"\";\n                    this._image.onerror = undefined;\n                    this._image = undefined;\n                    delete this._image;\n                }\n                if (this._element instanceof window.ImageBitmap) {\n                    this._element.close();\n                }\n            }\n            this._ready = false;\n        }\n    }, {\n        key: \"_seek\",\n        value: function _seek(time) {\n            _get(ImageNode.prototype.__proto__ || Object.getPrototypeOf(ImageNode.prototype), \"_seek\", this).call(this, time);\n            if (this.state === _sourcenode.SOURCENODESTATE.playing || this.state === _sourcenode.SOURCENODESTATE.paused) {\n                if (this._image === undefined) this._load();\n            }\n            if ((this._state === _sourcenode.SOURCENODESTATE.sequenced || this._state === _sourcenode.SOURCENODESTATE.ended) && this._element !== undefined) {\n                this._unload();\n            }\n        }\n    }, {\n        key: \"_update\",\n        value: function _update(currentTime) {\n            //if (!super._update(currentTime)) return false;\n            if (this._textureUploaded) {\n                _get(ImageNode.prototype.__proto__ || Object.getPrototypeOf(ImageNode.prototype), \"_update\", this).call(this, currentTime, false);\n            } else {\n                _get(ImageNode.prototype.__proto__ || Object.getPrototypeOf(ImageNode.prototype), \"_update\", this).call(this, currentTime);\n            }\n\n            if (this._startTime - this._currentTime <= this._preloadTime && this._state !== _sourcenode.SOURCENODESTATE.waiting && this._state !== _sourcenode.SOURCENODESTATE.ended) this._load();\n\n            if (this._state === _sourcenode.SOURCENODESTATE.playing) {\n                return true;\n            } else if (this._state === _sourcenode.SOURCENODESTATE.paused) {\n                return true;\n            } else if (this._state === _sourcenode.SOURCENODESTATE.ended && this._image !== undefined) {\n                this._unload();\n                return false;\n            }\n        }\n    }, {\n        key: \"elementURL\",\n        get: function get() {\n            return this._elementURL;\n        }\n    }]);\n\n    return ImageNode;\n}(_sourcenode2.default);\n\nexports.IMAGETYPE = TYPE;\nexports.default = ImageNode;\n\n/***/ }),\n\n/***/ \"./src/SourceNodes/medianode.js\":\n/*!**************************************!*\\\n  !*** ./src/SourceNodes/medianode.js ***!\n  \\**************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_134184__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if (\"value\" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };\n\nvar _sourcenode = __nested_webpack_require_134184__(/*! ./sourcenode */ \"./src/SourceNodes/sourcenode.js\");\n\nvar _sourcenode2 = _interopRequireDefault(_sourcenode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //Matthew Shotton, R&D User Experience,© BBC 2015\n\n\nvar MediaNode = function (_SourceNode) {\n    _inherits(MediaNode, _SourceNode);\n\n    /**\n     * Initialise an instance of a MediaNode.\n     * This should not be called directly, but extended by other Node Types which use a `HTMLMediaElement`.\n     */\n    function MediaNode(src, gl, renderGraph, currentTime) {\n        var globalPlaybackRate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1.0;\n        var sourceOffset = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n        var preloadTime = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 4;\n        var mediaElementCache = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : undefined;\n        var attributes = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};\n\n        _classCallCheck(this, MediaNode);\n\n        var _this = _possibleConstructorReturn(this, (MediaNode.__proto__ || Object.getPrototypeOf(MediaNode)).call(this, src, gl, renderGraph, currentTime));\n\n        _this._preloadTime = preloadTime;\n        _this._sourceOffset = sourceOffset;\n        _this._globalPlaybackRate = globalPlaybackRate;\n        _this._mediaElementCache = mediaElementCache;\n        _this._playbackRate = 1.0;\n        _this._playbackRateUpdated = true;\n        _this._attributes = Object.assign({ volume: 1.0 }, attributes);\n        _this._loopElement = false;\n        _this._isElementPlaying = false;\n        if (_this._attributes.loop) {\n            _this._loopElement = _this._attributes.loop;\n        }\n        return _this;\n    }\n\n    _createClass(MediaNode, [{\n        key: \"_triggerLoad\",\n        value: function _triggerLoad() {\n            var _this2 = this;\n\n            // If the user hasn't supplied an element, videocontext is responsible for the element\n            if (this._isResponsibleForElementLifeCycle) {\n                if (this._mediaElementCache) {\n                    /**\n                     * Get a cached video element and also pass this instance so the\n                     * cache can access the current play state.\n                     */\n                    this._element = this._mediaElementCache.getElementAndLinkToNode(this);\n                } else {\n                    this._element = document.createElement(this._elementType);\n                    this._element.setAttribute(\"crossorigin\", \"anonymous\");\n                    this._element.setAttribute(\"webkit-playsinline\", \"\");\n                    this._element.setAttribute(\"playsinline\", \"\");\n                    this._playbackRateUpdated = true;\n                }\n                this._element.volume = this._attributes.volume;\n                if (window.MediaStream !== undefined && this._elementURL instanceof MediaStream) {\n                    this._element.srcObject = this._elementURL;\n                } else {\n                    this._element.src = this._elementURL;\n                }\n            }\n            // at this stage either the user or the element cache should have provided an element\n            if (this._element) {\n                for (var key in this._attributes) {\n                    this._element[key] = this._attributes[key];\n                }\n\n                var currentTimeOffset = 0;\n                if (this._currentTime > this._startTime) currentTimeOffset = this._currentTime - this._startTime;\n                this._element.currentTime = this._sourceOffset + currentTimeOffset;\n                this._element.onerror = function () {\n                    if (_this2._element === undefined) return;\n                    console.debug(\"Error with element\", _this2._element);\n                    _this2._state = _sourcenode.SOURCENODESTATE.error;\n                    //Event though there's an error ready should be set to true so the node can output transparenn\n                    _this2._ready = true;\n                    _this2._triggerCallbacks(\"error\");\n                };\n            } else {\n                // If the element doesn't exist for whatever reason enter the error state.\n                this._state = _sourcenode.SOURCENODESTATE.error;\n                this._ready = true;\n                this._triggerCallbacks(\"error\");\n            }\n\n            this._loadTriggered = true;\n        }\n\n        /**\n         * _load has two functions:\n         *\n         * 1. `_triggerLoad` which ensures the element has the correct src and is at the correct currentTime,\n         *     so that the browser can start fetching media.\n         *\n         * 2.  `shouldPollForElementReadyState` waits until the element has a \"readState\" that signals there\n         *     is enough media to start playback. This is a little confusing as currently structured.\n         *     We're using the _update loop to poll the _load function which checks the element status.\n         *     When ready we fire off the \"loaded callback\"\n         *\n         */\n\n    }, {\n        key: \"_load\",\n        value: function _load() {\n            _get(MediaNode.prototype.__proto__ || Object.getPrototypeOf(MediaNode.prototype), \"_load\", this).call(this);\n\n            /**\n             * We've got to be careful here as _load is called many times whilst waiting for the element to buffer\n             * and this function should only be called once.\n             * This is step one in what should be a more thorough refactor\n             */\n            if (!this._loadTriggered) {\n                this._triggerLoad();\n            }\n\n            var shouldPollForElementReadyState = this._element !== undefined;\n            /**\n             * this expression is effectively polling the element, waiting for it to buffer\n             * it gets called a lot of time\n             */\n            if (shouldPollForElementReadyState) {\n                if (this._element.readyState > 3 && !this._element.seeking) {\n                    // at this point the element has enough data for current playback position\n                    // and at least a couple of frames into the future\n\n                    // Check if the duration has changed. Update if necessary.\n                    // this could potentially go in the normal update loop but I don't want to change\n                    // too many things at once\n                    if (this._loopElement === false) {\n                        if (this._stopTime === Infinity || this._stopTime == undefined) {\n                            this._stopTime = this._startTime + this._element.duration;\n                            this._triggerCallbacks(\"durationchange\", this.duration);\n                        }\n                    }\n\n                    // signal to user that this node has \"loaded\"\n                    if (this._ready !== true) {\n                        this._triggerCallbacks(\"loaded\");\n                        this._playbackRateUpdated = true;\n                    }\n\n                    this._ready = true;\n                } else {\n                    if (this._state !== _sourcenode.SOURCENODESTATE.error) {\n                        this._ready = false;\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"_unload\",\n        value: function _unload() {\n            _get(MediaNode.prototype.__proto__ || Object.getPrototypeOf(MediaNode.prototype), \"_unload\", this).call(this);\n            if (this._isResponsibleForElementLifeCycle && this._element !== undefined) {\n                this._element.removeAttribute(\"src\");\n                this._element.srcObject = undefined;\n                this._element.load();\n                for (var key in this._attributes) {\n                    this._element.removeAttribute(key);\n                }\n                // Unlink this form the cache, freeing up the element for another media node\n                if (this._mediaElementCache) this._mediaElementCache.unlinkNodeFromElement(this._element);\n                this._element = undefined;\n                if (!this._mediaElementCache) delete this._element;\n            }\n            // reset class to initial state\n            this._ready = false;\n            this._isElementPlaying = false;\n            // For completeness. I couldn't find a path that required reuse of this._loadTriggered after _unload.\n            this._loadTriggered = false;\n        }\n    }, {\n        key: \"_seek\",\n        value: function _seek(time) {\n            _get(MediaNode.prototype.__proto__ || Object.getPrototypeOf(MediaNode.prototype), \"_seek\", this).call(this, time);\n            if (this.state === _sourcenode.SOURCENODESTATE.playing || this.state === _sourcenode.SOURCENODESTATE.paused) {\n                if (this._element === undefined) this._load();\n                var relativeTime = this._currentTime - this._startTime + this._sourceOffset;\n                this._element.currentTime = relativeTime;\n                this._ready = false;\n            }\n            if ((this._state === _sourcenode.SOURCENODESTATE.sequenced || this._state === _sourcenode.SOURCENODESTATE.ended) && this._element !== undefined) {\n                this._unload();\n            }\n        }\n    }, {\n        key: \"_update\",\n        value: function _update(currentTime) {\n            var triggerTextureUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            //if (!super._update(currentTime)) return false;\n            _get(MediaNode.prototype.__proto__ || Object.getPrototypeOf(MediaNode.prototype), \"_update\", this).call(this, currentTime, triggerTextureUpdate);\n            //check if the media has ended\n            if (this._element !== undefined) {\n                if (this._element.ended) {\n                    this._state = _sourcenode.SOURCENODESTATE.ended;\n                    this._triggerCallbacks(\"ended\");\n                }\n            }\n\n            if (this._startTime - this._currentTime <= this._preloadTime && this._state !== _sourcenode.SOURCENODESTATE.waiting && this._state !== _sourcenode.SOURCENODESTATE.ended) this._load();\n\n            if (this._state === _sourcenode.SOURCENODESTATE.playing) {\n                if (this._playbackRateUpdated) {\n                    this._element.playbackRate = this._globalPlaybackRate * this._playbackRate;\n                    this._playbackRateUpdated = false;\n                }\n                if (!this._isElementPlaying) {\n                    this._element.play();\n                    if (this._stretchPaused) {\n                        this._element.pause();\n                    }\n                    this._isElementPlaying = true;\n                }\n                return true;\n            } else if (this._state === _sourcenode.SOURCENODESTATE.paused) {\n                this._element.pause();\n                this._isElementPlaying = false;\n                return true;\n            } else if (this._state === _sourcenode.SOURCENODESTATE.ended && this._element !== undefined) {\n                this._element.pause();\n                if (this._isElementPlaying) {\n                    this._unload();\n                }\n                return false;\n            }\n        }\n    }, {\n        key: \"clearTimelineState\",\n        value: function clearTimelineState() {\n            _get(MediaNode.prototype.__proto__ || Object.getPrototypeOf(MediaNode.prototype), \"clearTimelineState\", this).call(this);\n            if (this._element !== undefined) {\n                this._element.pause();\n                this._isElementPlaying = false;\n            }\n            this._unload();\n        }\n    }, {\n        key: \"destroy\",\n        value: function destroy() {\n            if (this._element) this._element.pause();\n            _get(MediaNode.prototype.__proto__ || Object.getPrototypeOf(MediaNode.prototype), \"destroy\", this).call(this);\n        }\n    }, {\n        key: \"playbackRate\",\n        set: function set(playbackRate) {\n            this._playbackRate = playbackRate;\n            this._playbackRateUpdated = true;\n        },\n        get: function get() {\n            return this._playbackRate;\n        }\n    }, {\n        key: \"stretchPaused\",\n        set: function set(stretchPaused) {\n            _set(MediaNode.prototype.__proto__ || Object.getPrototypeOf(MediaNode.prototype), \"stretchPaused\", stretchPaused, this);\n            if (this._element) {\n                if (this._stretchPaused) {\n                    this._element.pause();\n                } else {\n                    if (this._state === _sourcenode.SOURCENODESTATE.playing) {\n                        this._element.play();\n                    }\n                }\n            }\n        },\n        get: function get() {\n            return this._stretchPaused;\n        }\n    }, {\n        key: \"elementURL\",\n        get: function get() {\n            return this._elementURL;\n        }\n\n        /**\n         * @property {Boolean}\n         * @summary - Check if the element is waiting on the network to continue playback\n         */\n\n    }, {\n        key: \"_buffering\",\n        get: function get() {\n            if (this._element) {\n                return this._element.readyState < HTMLMediaElement.HAVE_FUTURE_DATA;\n            }\n\n            return false;\n        }\n    }, {\n        key: \"volume\",\n        set: function set(volume) {\n            this._attributes.volume = volume;\n            if (this._element !== undefined) this._element.volume = this._attributes.volume;\n        }\n    }]);\n\n    return MediaNode;\n}(_sourcenode2.default);\n\nexports.default = MediaNode;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/SourceNodes/nodes.js\":\n/*!**********************************!*\\\n  !*** ./src/SourceNodes/nodes.js ***!\n  \\**********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_150659__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _audionode = __nested_webpack_require_150659__(/*! ./audionode */ \"./src/SourceNodes/audionode.js\");\n\nvar _audionode2 = _interopRequireDefault(_audionode);\n\nvar _canvasnode = __nested_webpack_require_150659__(/*! ./canvasnode */ \"./src/SourceNodes/canvasnode.js\");\n\nvar _canvasnode2 = _interopRequireDefault(_canvasnode);\n\nvar _imagenode = __nested_webpack_require_150659__(/*! ./imagenode */ \"./src/SourceNodes/imagenode.js\");\n\nvar _imagenode2 = _interopRequireDefault(_imagenode);\n\nvar _medianode = __nested_webpack_require_150659__(/*! ./medianode */ \"./src/SourceNodes/medianode.js\");\n\nvar _medianode2 = _interopRequireDefault(_medianode);\n\nvar _sourcenode = __nested_webpack_require_150659__(/*! ./sourcenode */ \"./src/SourceNodes/sourcenode.js\");\n\nvar _sourcenode2 = _interopRequireDefault(_sourcenode);\n\nvar _videonode = __nested_webpack_require_150659__(/*! ./videonode */ \"./src/SourceNodes/videonode.js\");\n\nvar _videonode2 = _interopRequireDefault(_videonode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar NODES = {\n    AudioNode: _audionode2.default,\n    CanvasNode: _canvasnode2.default,\n    ImageNode: _imagenode2.default,\n    MediaNode: _medianode2.default,\n    SourceNode: _sourcenode2.default,\n    VideoNode: _videonode2.default\n};\n\nexports.default = NODES;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/SourceNodes/sourcenode.js\":\n/*!***************************************!*\\\n  !*** ./src/SourceNodes/sourcenode.js ***!\n  \\***************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_152303__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.SOURCETYPE = exports.SOURCENODESTATE = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _utils = __nested_webpack_require_152303__(/*! ../utils.js */ \"./src/utils.js\");\n\nvar _graphnode = __nested_webpack_require_152303__(/*! ../graphnode */ \"./src/graphnode.js\");\n\nvar _graphnode2 = _interopRequireDefault(_graphnode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //Matthew Shotton, R&D User Experience,© BBC 2015\n\n\nvar STATE = {\n    waiting: 0,\n    sequenced: 1,\n    playing: 2,\n    paused: 3,\n    ended: 4,\n    error: 5\n};\n\nvar TYPE = \"SourceNode\";\n\nvar SourceNode = function (_GraphNode) {\n    _inherits(SourceNode, _GraphNode);\n\n    /**\n     * Initialise an instance of a SourceNode.\n     * This is the base class for other Nodes which generate media to be passed into the processing pipeline.\n     */\n    function SourceNode(src, gl, renderGraph, currentTime) {\n        _classCallCheck(this, SourceNode);\n\n        var _this = _possibleConstructorReturn(this, (SourceNode.__proto__ || Object.getPrototypeOf(SourceNode)).call(this, gl, renderGraph, [], true));\n\n        _this._element = undefined;\n        _this._elementURL = undefined;\n        _this._isResponsibleForElementLifeCycle = true;\n\n        if (typeof src === \"string\" || window.MediaStream !== undefined && src instanceof MediaStream) {\n            //create the node from the passed URL or MediaStream\n            _this._elementURL = src;\n        } else {\n            //use the passed element to create the SourceNode\n            _this._element = src;\n            _this._isResponsibleForElementLifeCycle = false;\n        }\n\n        _this._state = STATE.waiting;\n        _this._currentTime = currentTime;\n        _this._startTime = NaN;\n        _this._stopTime = Infinity;\n        _this._ready = false;\n        _this._loadCalled = false;\n        _this._stretchPaused = false;\n        _this._texture = (0, _utils.createElementTexture)(gl);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 0, 0]));\n        _this._callbacks = [];\n        _this._renderPaused = false;\n        _this._displayName = TYPE;\n        return _this;\n    }\n\n    /**\n     * Returns the state of the node.\n     * 0 - Waiting, start() has not been called on it yet.\n     * 1 - Sequenced, start() has been called but it is not playing yet.\n     * 2 - Playing, the node is playing.\n     * 3 - Paused, the node is paused.\n     * 4 - Ended, playback of the node has finished.\n     *\n     * @example\n     * var ctx = new VideoContext();\n     * var videoNode = ctx.createVideoSourceNode('video.mp4');\n     * console.log(videoNode.state); //will output 0 (for waiting)\n     * videoNode.start(5);\n     * console.log(videoNode.state); //will output 1 (for sequenced)\n     * videoNode.stop(10);\n     * ctx.play();\n     * console.log(videoNode.state); //will output 2 (for playing)\n     * ctx.paused();\n     * console.log(videoNode.state); //will output 3 (for paused)\n     */\n\n\n    _createClass(SourceNode, [{\n        key: \"_load\",\n        value: function _load() {\n            if (!this._loadCalled) {\n                this._triggerCallbacks(\"load\");\n                this._loadCalled = true;\n            }\n        }\n    }, {\n        key: \"_unload\",\n        value: function _unload() {\n            this._triggerCallbacks(\"destroy\");\n            this._loadCalled = false;\n        }\n\n        /**\n         * Register callbacks against one of these events: \"load\", \"destroy\", \"seek\", \"pause\", \"play\", \"ended\", \"durationchange\", \"loaded\", \"error\"\n         *\n         * @param {String} type - the type of event to register the callback against.\n         * @param {function} func - the function to call.\n         *\n         * @example\n         * var ctx = new VideoContext();\n         * var videoNode = ctx.createVideoSourceNode('video.mp4');\n         *\n         * videoNode.registerCallback(\"load\", function(){\"video is loading\"});\n         * videoNode.registerCallback(\"play\", function(){\"video is playing\"});\n         * videoNode.registerCallback(\"ended\", function(){\"video has eneded\"});\n         *\n         */\n\n    }, {\n        key: \"registerCallback\",\n        value: function registerCallback(type, func) {\n            this._callbacks.push({ type: type, func: func });\n        }\n\n        /**\n         * Remove callback.\n         *\n         * @param {function} [func] - the callback to remove, if undefined will remove all callbacks for this node.\n         *\n         * @example\n         * var ctx = new VideoContext();\n         * var videoNode = ctx.createVideoSourceNode('video.mp4');\n         *\n         * videoNode.registerCallback(\"load\", function(){\"video is loading\"});\n         * videoNode.registerCallback(\"play\", function(){\"video is playing\"});\n         * videoNode.registerCallback(\"ended\", function(){\"video has eneded\"});\n         * videoNode.unregisterCallback(); //remove all of the three callbacks.\n         *\n         */\n\n    }, {\n        key: \"unregisterCallback\",\n        value: function unregisterCallback(func) {\n            var toRemove = [];\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = this._callbacks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var callback = _step.value;\n\n                    if (func === undefined) {\n                        toRemove.push(callback);\n                    } else if (callback.func === func) {\n                        toRemove.push(callback);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = toRemove[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var _callback = _step2.value;\n\n                    var index = this._callbacks.indexOf(_callback);\n                    this._callbacks.splice(index, 1);\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"_triggerCallbacks\",\n        value: function _triggerCallbacks(type, data) {\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = this._callbacks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var callback = _step3.value;\n\n                    if (callback.type === type) {\n                        if (data !== undefined) {\n                            callback.func(this, data);\n                        } else {\n                            callback.func(this);\n                        }\n                    }\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Start playback at VideoContext.currentTime plus passed time. If passed time is negative, will play as soon as possible.\n         *\n         * @param {number} time - the time from the currentTime of the VideoContext which to start playing, if negative will play as soon as possible.\n         * @return {boolean} Will return true is seqeuncing has succeded, or false if it is already sequenced.\n         */\n\n    }, {\n        key: \"start\",\n        value: function start(time) {\n            if (this._state !== STATE.waiting) {\n                console.debug(\"SourceNode is has already been sequenced. Can't sequence twice.\");\n                return false;\n            }\n\n            this._startTime = this._currentTime + time;\n            this._state = STATE.sequenced;\n            return true;\n        }\n\n        /**\n         * Start playback at an absolute time ont the VideoContext's timeline.\n         *\n         * @param {number} time - the time on the VideoContexts timeline to start playing.\n         * @return {boolean} Will return true is seqeuncing has succeded, or false if it is already sequenced.\n         */\n\n    }, {\n        key: \"startAt\",\n        value: function startAt(time) {\n            if (this._state !== STATE.waiting) {\n                console.debug(\"SourceNode is has already been sequenced. Can't sequence twice.\");\n                return false;\n            }\n            this._startTime = time;\n            this._state = STATE.sequenced;\n            return true;\n        }\n    }, {\n        key: \"stop\",\n\n\n        /**\n         * Stop playback at VideoContext.currentTime plus passed time. If passed time is negative, will play as soon as possible.\n         *\n         * @param {number} time - the time from the currentTime of the video context which to stop playback.\n         * @return {boolean} Will return true is seqeuncing has succeded, or false if the playback has already ended or if start hasn't been called yet, or if time is less than the start time.\n         */\n        value: function stop(time) {\n            if (this._state === STATE.ended) {\n                console.debug(\"SourceNode has already ended. Cannot call stop.\");\n                return false;\n            } else if (this._state === STATE.waiting) {\n                console.debug(\"SourceNode must have start called before stop is called\");\n                return false;\n            }\n            if (this._currentTime + time <= this._startTime) {\n                console.debug(\"SourceNode must have a stop time after it's start time, not before.\");\n                return false;\n            }\n            this._stopTime = this._currentTime + time;\n            this._stretchPaused = false;\n            this._triggerCallbacks(\"durationchange\", this.duration);\n            return true;\n        }\n\n        /**\n         * Stop playback at an absolute time ont the VideoContext's timeline.\n         *\n         * @param {number} time - the time on the VideoContexts timeline to stop playing.\n         * @return {boolean} Will return true is seqeuncing has succeded, or false if the playback has already ended or if start hasn't been called yet, or if time is less than the start time.\n         */\n\n    }, {\n        key: \"stopAt\",\n        value: function stopAt(time) {\n            if (this._state === STATE.ended) {\n                console.debug(\"SourceNode has already ended. Cannot call stop.\");\n                return false;\n            } else if (this._state === STATE.waiting) {\n                console.debug(\"SourceNode must have start called before stop is called\");\n                return false;\n            }\n            if (time <= this._startTime) {\n                console.debug(\"SourceNode must have a stop time after it's start time, not before.\");\n                return false;\n            }\n            this._stopTime = time;\n            this._stretchPaused = false;\n            this._triggerCallbacks(\"durationchange\", this.duration);\n            return true;\n        }\n    }, {\n        key: \"_seek\",\n        value: function _seek(time) {\n            this._renderPaused = false;\n\n            this._triggerCallbacks(\"seek\", time);\n\n            if (this._state === STATE.waiting) return;\n            if (time < this._startTime) {\n                (0, _utils.clearTexture)(this._gl, this._texture);\n                this._state = STATE.sequenced;\n            }\n            if (time >= this._startTime && this._state !== STATE.paused) {\n                this._state = STATE.playing;\n            }\n            if (time >= this._stopTime) {\n                (0, _utils.clearTexture)(this._gl, this._texture);\n                this._triggerCallbacks(\"ended\");\n                this._state = STATE.ended;\n            }\n            //update the current time\n            this._currentTime = time;\n        }\n    }, {\n        key: \"_pause\",\n        value: function _pause() {\n            if (this._state === STATE.playing || this._currentTime === 0 && this._startTime === 0) {\n                this._triggerCallbacks(\"pause\");\n                this._state = STATE.paused;\n                this._renderPaused = false;\n            }\n        }\n    }, {\n        key: \"_play\",\n        value: function _play() {\n            if (this._state === STATE.paused) {\n                this._triggerCallbacks(\"play\");\n                this._state = STATE.playing;\n            }\n        }\n    }, {\n        key: \"_isReady\",\n        value: function _isReady() {\n            if (this._buffering) {\n                return false;\n            }\n            if (this._state === STATE.playing || this._state === STATE.paused || this._state === STATE.error) {\n                return this._ready;\n            }\n            return true;\n        }\n    }, {\n        key: \"_update\",\n        value: function _update(currentTime) {\n            var triggerTextureUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            this._rendered = true;\n            var timeDelta = currentTime - this._currentTime;\n\n            //update the current time\n            this._currentTime = currentTime;\n\n            //update the state\n            if (this._state === STATE.waiting || this._state === STATE.ended || this._state === STATE.error) return false;\n\n            this._triggerCallbacks(\"render\", currentTime);\n\n            if (currentTime < this._startTime) {\n                (0, _utils.clearTexture)(this._gl, this._texture);\n                this._state = STATE.sequenced;\n            }\n\n            if (currentTime >= this._startTime && this._state !== STATE.paused && this._state !== STATE.error) {\n                if (this._state !== STATE.playing) this._triggerCallbacks(\"play\");\n                this._state = STATE.playing;\n            }\n\n            if (currentTime >= this._stopTime) {\n                (0, _utils.clearTexture)(this._gl, this._texture);\n                this._triggerCallbacks(\"ended\");\n                this._state = STATE.ended;\n            }\n\n            //update this source nodes texture\n            if (this._element === undefined || this._ready === false) return true;\n\n            if (!this._renderPaused && this._state === STATE.paused) {\n                if (triggerTextureUpdate) (0, _utils.updateTexture)(this._gl, this._texture, this._element);\n                this._renderPaused = true;\n            }\n            if (this._state === STATE.playing) {\n                if (triggerTextureUpdate) (0, _utils.updateTexture)(this._gl, this._texture, this._element);\n                if (this._stretchPaused) {\n                    this._stopTime += timeDelta;\n                }\n            }\n\n            return true;\n        }\n\n        /**\n         * Clear any timeline state the node currently has, this puts the node in the \"waiting\" state, as if neither start nor stop had been called.\n         */\n\n    }, {\n        key: \"clearTimelineState\",\n        value: function clearTimelineState() {\n            this._startTime = NaN;\n            this._stopTime = Infinity;\n            this._state = STATE.waiting;\n        }\n\n        /**\n         * Destroy and clean-up the node.\n         */\n\n    }, {\n        key: \"destroy\",\n        value: function destroy() {\n            this._unload();\n            _get(SourceNode.prototype.__proto__ || Object.getPrototypeOf(SourceNode.prototype), \"destroy\", this).call(this);\n            this.unregisterCallback();\n            delete this._element;\n            this._elementURL = undefined;\n            this._state = STATE.waiting;\n            this._currentTime = 0;\n            this._startTime = NaN;\n            this._stopTime = Infinity;\n            this._ready = false;\n            this._loadCalled = false;\n            this._gl.deleteTexture(this._texture);\n            this._texture = undefined;\n        }\n    }, {\n        key: \"state\",\n        get: function get() {\n            return this._state;\n        }\n\n        /**\n         * Returns the underlying DOM element which represents this source node.\n         * Note: If a source node is created with a url rather than passing in an existing element then this will return undefined until the source node preloads the element.\n         *\n         * @return {Element} The underlying DOM element representing the media for the node. If the lifecycle of the video is owned UNSIGNED_BYTE the node itself, this can return undefined if the element hasn't been loaded yet.\n         *\n         * @example\n         * //Accessing the Element on a VideoNode created via a URL\n         * var ctx = new VideoContext();\n         * var videoNode = ctx.createVideoSourceNode('video.mp4');\n         * videoNode.start(0);\n         * videoNode.stop(5);\n         * //When the node starts playing the element should exist so set it's volume to 0\n         * videoNode.regsiterCallback(\"play\", function(){videoNode.element.volume = 0;});\n         *\n         *\n         * @example\n         * //Accessing the Element on a VideoNode created via an already existing element\n         * var ctx = new VideoContext();\n         * var videoElement = document.createElement(\"video\");\n         * var videoNode = ctx.createVideoSourceNode(videoElement);\n         * videoNode.start(0);\n         * videoNode.stop(5);\n         * //The elemnt can be accessed any time because it's lifecycle is managed outside of the VideoContext\n         * videoNode.element.volume = 0;\n         *\n         */\n\n    }, {\n        key: \"element\",\n        get: function get() {\n            return this._element;\n        }\n\n        /**\n         * Returns the duration of the node on a timeline. If no start time is set will return undefiend, if no stop time is set will return Infinity.\n         *\n         * @return {number} The duration of the node in seconds.\n         *\n         * @example\n         * var ctx = new VideoContext();\n         * var videoNode = ctx.createVideoSourceNode('video.mp4');\n         * videoNode.start(5);\n         * videoNode.stop(10);\n         * console.log(videoNode.duration); //will output 10\n         */\n\n    }, {\n        key: \"duration\",\n        get: function get() {\n            if (isNaN(this._startTime)) return undefined;\n            if (this._stopTime === Infinity) return Infinity;\n            return this._stopTime - this._startTime;\n        }\n    }, {\n        key: \"stretchPaused\",\n        set: function set(stretchPaused) {\n            this._stretchPaused = stretchPaused;\n        },\n        get: function get() {\n            return this._stretchPaused;\n        }\n    }, {\n        key: \"startTime\",\n        get: function get() {\n            return this._startTime;\n        }\n    }, {\n        key: \"stopTime\",\n        get: function get() {\n            return this._stopTime;\n        }\n    }]);\n\n    return SourceNode;\n}(_graphnode2.default);\n\nexports.SOURCENODESTATE = STATE;\nexports.SOURCETYPE = TYPE;\nexports.default = SourceNode;\n\n/***/ }),\n\n/***/ \"./src/SourceNodes/videonode.js\":\n/*!**************************************!*\\\n  !*** ./src/SourceNodes/videonode.js ***!\n  \\**************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_174878__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.VIDEOTYPE = undefined;\n\nvar _medianode = __nested_webpack_require_174878__(/*! ./medianode */ \"./src/SourceNodes/medianode.js\");\n\nvar _medianode2 = _interopRequireDefault(_medianode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //Matthew Shotton, R&D User Experience,© BBC 2015\n\n\nvar TYPE = \"VideoNode\";\n\nvar VideoNode = function (_MediaNode) {\n    _inherits(VideoNode, _MediaNode);\n\n    /**\n     * Initialise an instance of a VideoNode.\n     * This should not be called directly, but created through a call to videoContext.createVideoNode();\n     */\n    function VideoNode() {\n        _classCallCheck(this, VideoNode);\n\n        var _this = _possibleConstructorReturn(this, (VideoNode.__proto__ || Object.getPrototypeOf(VideoNode)).apply(this, arguments));\n\n        _this._displayName = TYPE;\n        _this._elementType = \"video\";\n        return _this;\n    }\n\n    return VideoNode;\n}(_medianode2.default);\n\nexports.VIDEOTYPE = TYPE;\nexports.default = VideoNode;\n\n/***/ }),\n\n/***/ \"./src/exceptions.js\":\n/*!***************************!*\\\n  !*** ./src/exceptions.js ***!\n  \\***************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ConnectException = ConnectException;\nexports.RenderException = RenderException;\n//Matthew Shotton, R&D User Experience,© BBC 2015\nfunction ConnectException(message) {\n    this.message = message;\n    this.name = \"ConnectionException\";\n}\n\nfunction RenderException(message) {\n    this.message = message;\n    this.name = \"RenderException\";\n}\n\n/***/ }),\n\n/***/ \"./src/graphnode.js\":\n/*!**************************!*\\\n  !*** ./src/graphnode.js ***!\n  \\**************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//Matthew Shotton, R&D User Experience,© BBC 2015\n\nvar TYPE = \"GraphNode\";\n\nvar GraphNode = function () {\n    /**\n     * Base class from which all processing and source nodes are derrived.\n     */\n    function GraphNode(gl, renderGraph, inputNames) {\n        var limitConnections = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n        _classCallCheck(this, GraphNode);\n\n        this._renderGraph = renderGraph;\n        this._limitConnections = limitConnections;\n        this._inputNames = inputNames;\n        this._destroyed = false;\n\n        //Setup WebGL output texture\n        this._gl = gl;\n        this._renderGraph = renderGraph;\n        this._rendered = false;\n        this._displayName = TYPE;\n    }\n\n    /**\n     * Get a string representation of the class name.\n     *\n     * @return String A string of the class name.\n     */\n\n    _createClass(GraphNode, [{\n        key: \"connect\",\n\n\n        /**\n         * Connect this node to the targetNode\n         *\n         * @param {GraphNode} targetNode - the node to connect.\n         * @param {(number| String)} [targetPort] - the port on the targetNode to connect to, this can be an index, a string identifier, or undefined (in which case the next available port will be connected to).\n         *\n         */\n        value: function connect(targetNode, targetPort) {\n            return this._renderGraph.registerConnection(this, targetNode, targetPort);\n        }\n\n        /**\n         * Disconnect this node from the targetNode. If targetNode is undefind remove all out-bound connections.\n         *\n         * @param {GraphNode} [targetNode] - the node to disconnect from. If undefined, disconnect from all nodes.\n         *\n         */\n\n    }, {\n        key: \"disconnect\",\n        value: function disconnect(targetNode) {\n            var _this = this;\n\n            if (targetNode === undefined) {\n                var toRemove = this._renderGraph.getOutputsForNode(this);\n                toRemove.forEach(function (target) {\n                    return _this._renderGraph.unregisterConnection(_this, target);\n                });\n                if (toRemove.length > 0) return true;\n                return false;\n            }\n            return this._renderGraph.unregisterConnection(this, targetNode);\n        }\n\n        /**\n         * Destory this node, removing it from the graph.\n         */\n\n    }, {\n        key: \"destroy\",\n        value: function destroy() {\n            this.disconnect();\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = this.inputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var input = _step.value;\n\n                    input.disconnect(this);\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            this._destroyed = true;\n        }\n    }, {\n        key: \"displayName\",\n        get: function get() {\n            return this._displayName;\n        }\n\n        /**\n         * Get the names of the inputs to this node.\n         *\n         * @return {String[]} An array of the names of the inputs ot the node.\n         */\n\n    }, {\n        key: \"inputNames\",\n        get: function get() {\n            return this._inputNames.slice();\n        }\n\n        /**\n         * The maximum number of connections that can be made to this node. If there is not limit this will return Infinity.\n         *\n         * @return {number} The number of connections which can be made to this node.\n         */\n\n    }, {\n        key: \"maximumConnections\",\n        get: function get() {\n            if (this._limitConnections === false) return Infinity;\n            return this._inputNames.length;\n        }\n\n        /**\n         * Get an array of all the nodes which connect to this node.\n         *\n         * @return {GraphNode[]} An array of nodes which connect to this node.\n         */\n\n    }, {\n        key: \"inputs\",\n        get: function get() {\n            var result = this._renderGraph.getInputsForNode(this);\n            result = result.filter(function (n) {\n                return n !== undefined;\n            });\n            return result;\n        }\n\n        /**\n         * Get an array of all the nodes which this node outputs to.\n         *\n         * @return {GraphNode[]} An array of nodes which this node connects to.\n         */\n\n    }, {\n        key: \"outputs\",\n        get: function get() {\n            return this._renderGraph.getOutputsForNode(this);\n        }\n\n        /**\n         * Get whether the node has been destroyed or not.\n         *\n         * @return {boolean} A true/false value of whather the node has been destoryed or not.\n         */\n\n    }, {\n        key: \"destroyed\",\n        get: function get() {\n            return this._destroyed;\n        }\n    }]);\n\n    return GraphNode;\n}();\n\nexports.GRAPHTYPE = TYPE;\nexports.default = GraphNode;\n\n/***/ }),\n\n/***/ \"./src/rendergraph.js\":\n/*!****************************!*\\\n  !*** ./src/rendergraph.js ***!\n  \\****************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_184237__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //Matthew Shotton, R&D User Experience,© BBC 2015\n\n\nvar _exceptions = __nested_webpack_require_184237__(/*! ./exceptions.js */ \"./src/exceptions.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar RenderGraph = function () {\n    /**\n     * Manages the rendering graph.\n     */\n    function RenderGraph() {\n        _classCallCheck(this, RenderGraph);\n\n        this.connections = [];\n    }\n\n    /**\n     * Get a list of nodes which are connected to the output of the passed node.\n     *\n     * @param {GraphNode} node - the node to get the outputs for.\n     * @return {GraphNode[]} An array of the nodes which are connected to the output.\n     */\n\n\n    _createClass(RenderGraph, [{\n        key: \"getOutputsForNode\",\n        value: function getOutputsForNode(node) {\n            var results = [];\n            this.connections.forEach(function (connection) {\n                if (connection.source === node) {\n                    results.push(connection.destination);\n                }\n            });\n            return results;\n        }\n\n        /**\n         * Get a list of nodes which are connected, by input name, to the given node. Array contains objects of the form: {\"source\":sourceNode, \"type\":\"name\", \"name\":inputName, \"destination\":destinationNode}.\n         *\n         * @param {GraphNode} node - the node to get the named inputs for.\n         * @return {Object[]} An array of objects representing the nodes and connection type, which are connected to the named inputs for the node.\n         */\n\n    }, {\n        key: \"getNamedInputsForNode\",\n        value: function getNamedInputsForNode(node) {\n            var results = [];\n            this.connections.forEach(function (connection) {\n                if (connection.destination === node && connection.type === \"name\") {\n                    results.push(connection);\n                }\n            });\n            return results;\n        }\n\n        /**\n         * Get a list of nodes which are connected, by z-index name, to the given node. Array contains objects of the form: {\"source\":sourceNode, \"type\":\"zIndex\", \"zIndex\":0, \"destination\":destinationNode}.\n         *\n         * @param {GraphNode} node - the node to get the z-index refernced inputs for.\n         * @return {Object[]} An array of objects representing the nodes and connection type, which are connected by z-Index for the node.\n         */\n\n    }, {\n        key: \"getZIndexInputsForNode\",\n        value: function getZIndexInputsForNode(node) {\n            var results = [];\n            this.connections.forEach(function (connection) {\n                if (connection.destination === node && connection.type === \"zIndex\") {\n                    results.push(connection);\n                }\n            });\n            results.sort(function (a, b) {\n                return a.zIndex - b.zIndex;\n            });\n            return results;\n        }\n\n        /**\n         * Get a list of nodes which are connected as inputs to the given node. The length of the return array is always equal to the number of inputs for the node, with undefined taking the place of any inputs not connected.\n         *\n         * @param {GraphNode} node - the node to get the inputs for.\n         * @return {GraphNode[]} An array of GraphNodes which are connected to the node.\n         */\n\n    }, {\n        key: \"getInputsForNode\",\n        value: function getInputsForNode(node) {\n            var inputNames = node.inputNames;\n            var results = [];\n            var namedInputs = this.getNamedInputsForNode(node);\n            var indexedInputs = this.getZIndexInputsForNode(node);\n\n            if (node._limitConnections === true) {\n                for (var i = 0; i < inputNames.length; i++) {\n                    results[i] = undefined;\n                }\n\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = namedInputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var connection = _step.value;\n\n                        var index = inputNames.indexOf(connection.name);\n                        results[index] = connection.source;\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                var indexedInputsIndex = 0;\n                for (var _i = 0; _i < results.length; _i++) {\n                    if (results[_i] === undefined && indexedInputs[indexedInputsIndex] !== undefined) {\n                        results[_i] = indexedInputs[indexedInputsIndex].source;\n                        indexedInputsIndex += 1;\n                    }\n                }\n            } else {\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                    for (var _iterator2 = namedInputs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var _connection = _step2.value;\n\n                        results.push(_connection.source);\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n                    } finally {\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n\n                var _iteratorNormalCompletion3 = true;\n                var _didIteratorError3 = false;\n                var _iteratorError3 = undefined;\n\n                try {\n                    for (var _iterator3 = indexedInputs[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                        var _connection2 = _step3.value;\n\n                        results.push(_connection2.source);\n                    }\n                } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                            _iterator3.return();\n                        }\n                    } finally {\n                        if (_didIteratorError3) {\n                            throw _iteratorError3;\n                        }\n                    }\n                }\n            }\n            return results;\n        }\n\n        /**\n         * Check if a named input on a node is available to connect too.\n         * @param {GraphNode} node - the node to check.\n         * @param {String} inputName - the named input to check.\n         */\n\n    }, {\n        key: \"isInputAvailable\",\n        value: function isInputAvailable(node, inputName) {\n            if (node._inputNames.indexOf(inputName) === -1) return false;\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n                for (var _iterator4 = this.connections[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var connection = _step4.value;\n\n                    if (connection.type === \"name\") {\n                        if (connection.destination === node && connection.name === inputName) {\n                            return false;\n                        }\n                    }\n                }\n            } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                        _iterator4.return();\n                    }\n                } finally {\n                    if (_didIteratorError4) {\n                        throw _iteratorError4;\n                    }\n                }\n            }\n\n            return true;\n        }\n\n        /**\n         * Register a connection between two nodes.\n         *\n         * @param {GraphNode} sourceNode - the node to connect from.\n         * @param {GraphNode} destinationNode - the node to connect to.\n         * @param {(String | number)} [target] - the target port of the conenction, this could be a string to specfiy a specific named port, a number to specify a port by index, or undefined, in which case the next available port will be connected to.\n         * @return {boolean} Will return true if connection succeeds otherwise will throw a ConnectException.\n         */\n\n    }, {\n        key: \"registerConnection\",\n        value: function registerConnection(sourceNode, destinationNode, target) {\n            if (destinationNode.inputs.length >= destinationNode.inputNames.length && destinationNode._limitConnections === true) {\n                throw new _exceptions.ConnectException(\"Node has reached max number of inputs, can't connect\");\n            }\n\n            if (destinationNode._limitConnections === false) {\n                //check if connection is already made, if so raise a warning\n                var inputs = this.getInputsForNode(destinationNode);\n                if (inputs.includes(sourceNode)) {\n                    console.debug(\"WARNING - node connected mutliple times, removing previous connection\");\n                    this.unregisterConnection(sourceNode, destinationNode);\n                }\n            }\n\n            if (typeof target === \"number\") {\n                //target is a specific\n                this.connections.push({\n                    source: sourceNode,\n                    type: \"zIndex\",\n                    zIndex: target,\n                    destination: destinationNode\n                });\n            } else if (typeof target === \"string\" && destinationNode._limitConnections) {\n                //target is a named port\n\n                //make sure named port is free\n                if (this.isInputAvailable(destinationNode, target)) {\n                    this.connections.push({\n                        source: sourceNode,\n                        type: \"name\",\n                        name: target,\n                        destination: destinationNode\n                    });\n                } else {\n                    throw new _exceptions.ConnectException(\"Port \" + target + \" is already connected to\");\n                }\n            } else {\n                //target is undefined so just make it a high zIndex\n                var indexedConns = this.getZIndexInputsForNode(destinationNode);\n                var index = 0;\n                if (indexedConns.length > 0) index = indexedConns[indexedConns.length - 1].zIndex + 1;\n                this.connections.push({\n                    source: sourceNode,\n                    type: \"zIndex\",\n                    zIndex: index,\n                    destination: destinationNode\n                });\n            }\n            return true;\n        }\n\n        /**\n         * Remove a connection between two nodes.\n         * @param {GraphNode} sourceNode - the node to unregsiter connection from.\n         * @param {GraphNode} destinationNode - the node to register connection to.\n         * @return {boolean} Will return true if removing connection succeeds, or false if there was no connectionsction to remove.\n         */\n\n    }, {\n        key: \"unregisterConnection\",\n        value: function unregisterConnection(sourceNode, destinationNode) {\n            var _this = this;\n\n            var toRemove = [];\n\n            this.connections.forEach(function (connection) {\n                if (connection.source === sourceNode && connection.destination === destinationNode) {\n                    toRemove.push(connection);\n                }\n            });\n\n            if (toRemove.length === 0) return false;\n\n            toRemove.forEach(function (removeNode) {\n                var index = _this.connections.indexOf(removeNode);\n                _this.connections.splice(index, 1);\n            });\n\n            return true;\n        }\n    }], [{\n        key: \"outputEdgesFor\",\n        value: function outputEdgesFor(node, connections) {\n            var results = [];\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n                for (var _iterator5 = connections[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                    var conn = _step5.value;\n\n                    if (conn.source === node) {\n                        results.push(conn);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                        _iterator5.return();\n                    }\n                } finally {\n                    if (_didIteratorError5) {\n                        throw _iteratorError5;\n                    }\n                }\n            }\n\n            return results;\n        }\n    }, {\n        key: \"inputEdgesFor\",\n        value: function inputEdgesFor(node, connections) {\n            var results = [];\n            var _iteratorNormalCompletion6 = true;\n            var _didIteratorError6 = false;\n            var _iteratorError6 = undefined;\n\n            try {\n                for (var _iterator6 = connections[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                    var conn = _step6.value;\n\n                    if (conn.destination === node) {\n                        results.push(conn);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                        _iterator6.return();\n                    }\n                } finally {\n                    if (_didIteratorError6) {\n                        throw _iteratorError6;\n                    }\n                }\n            }\n\n            return results;\n        }\n    }, {\n        key: \"getInputlessNodes\",\n        value: function getInputlessNodes(connections) {\n            var inputLess = [];\n            var _iteratorNormalCompletion7 = true;\n            var _didIteratorError7 = false;\n            var _iteratorError7 = undefined;\n\n            try {\n                for (var _iterator7 = connections[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                    var conn = _step7.value;\n\n                    inputLess.push(conn.source);\n                }\n            } catch (err) {\n                _didIteratorError7 = true;\n                _iteratorError7 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                        _iterator7.return();\n                    }\n                } finally {\n                    if (_didIteratorError7) {\n                        throw _iteratorError7;\n                    }\n                }\n            }\n\n            var _iteratorNormalCompletion8 = true;\n            var _didIteratorError8 = false;\n            var _iteratorError8 = undefined;\n\n            try {\n                for (var _iterator8 = connections[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                    var _conn = _step8.value;\n\n                    var index = inputLess.indexOf(_conn.destination);\n                    if (index !== -1) {\n                        inputLess.splice(index, 1);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError8 = true;\n                _iteratorError8 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                        _iterator8.return();\n                    }\n                } finally {\n                    if (_didIteratorError8) {\n                        throw _iteratorError8;\n                    }\n                }\n            }\n\n            return inputLess;\n        }\n    }]);\n\n    return RenderGraph;\n}();\n\nexports.default = RenderGraph;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/utils.js\":\n/*!**********************!*\\\n  !*** ./src/utils.js ***!\n  \\**********************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_202777__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.UpdateablesManager = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //Matthew Shotton, R&D User Experience,© BBC 2015\n\n\nexports.compileShader = compileShader;\nexports.createShaderProgram = createShaderProgram;\nexports.createElementTexture = createElementTexture;\nexports.updateTexture = updateTexture;\nexports.clearTexture = clearTexture;\nexports.generateRandomId = generateRandomId;\nexports.exportToJSON = exportToJSON;\nexports.snapshot = snapshot;\nexports.createControlFormForNode = createControlFormForNode;\nexports.visualiseVideoContextGraph = visualiseVideoContextGraph;\nexports.createSigmaGraphDataFromRenderGraph = createSigmaGraphDataFromRenderGraph;\nexports.importSimpleEDL = importSimpleEDL;\nexports.visualiseVideoContextTimeline = visualiseVideoContextTimeline;\nexports.mediaElementHasSource = mediaElementHasSource;\n\nvar _definitions = __nested_webpack_require_202777__(/*! ./Definitions/definitions.js */ \"./src/Definitions/definitions.js\");\n\nvar _definitions2 = _interopRequireDefault(_definitions);\n\nvar _sourcenode = __nested_webpack_require_202777__(/*! ./SourceNodes/sourcenode.js */ \"./src/SourceNodes/sourcenode.js\");\n\nvar _videonode = __nested_webpack_require_202777__(/*! ./SourceNodes/videonode.js */ \"./src/SourceNodes/videonode.js\");\n\nvar _canvasnode = __nested_webpack_require_202777__(/*! ./SourceNodes/canvasnode.js */ \"./src/SourceNodes/canvasnode.js\");\n\nvar _imagenode = __nested_webpack_require_202777__(/*! ./SourceNodes/imagenode.js */ \"./src/SourceNodes/imagenode.js\");\n\nvar _destinationnode = __nested_webpack_require_202777__(/*! ./DestinationNode/destinationnode.js */ \"./src/DestinationNode/destinationnode.js\");\n\nvar _transitionnode = __nested_webpack_require_202777__(/*! ./ProcessingNodes/transitionnode.js */ \"./src/ProcessingNodes/transitionnode.js\");\n\nvar _compositingnode = __nested_webpack_require_202777__(/*! ./ProcessingNodes/compositingnode.js */ \"./src/ProcessingNodes/compositingnode.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Utility function to compile a WebGL Vertex or Fragment shader.\n *\n * @param {WebGLRenderingContext} gl - the webgl context fo which to build the shader.\n * @param {String} shaderSource - A string of shader code to compile.\n * @param {number} shaderType - Shader type, either WebGLRenderingContext.VERTEX_SHADER or WebGLRenderingContext.FRAGMENT_SHADER.\n *\n * @return {WebGLShader} A compiled shader.\n *\n */\nfunction compileShader(gl, shaderSource, shaderType) {\n    var shader = gl.createShader(shaderType);\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!success) {\n        throw \"could not compile shader:\" + gl.getShaderInfoLog(shader);\n    }\n    return shader;\n}\n\n/*\n * Create a shader program from a passed vertex and fragment shader source string.\n *\n * @param {WebGLRenderingContext} gl - the webgl context fo which to build the shader.\n * @param {WebGLShader} vertexShader - A compiled vertex shader.\n * @param {WebGLShader} fragmentShader - A compiled fragment shader.\n *\n * @return {WebGLProgram} A compiled & linkde shader program.\n */\nfunction createShaderProgram(gl, vertexShader, fragmentShader) {\n    var program = gl.createProgram();\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        throw {\n            error: 4,\n            msg: \"Can't link shader program for track\",\n            toString: function toString() {\n                return this.msg;\n            }\n        };\n    }\n    return program;\n}\n\nfunction createElementTexture(gl) {\n    var texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    // Set the parameters so we can render any size image.\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    //Initialise the texture untit to clear.\n    //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, type);\n\n    return texture;\n}\n\nfunction updateTexture(gl, texture, element) {\n    if (element.readyState !== undefined && element.readyState === 0) return;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, element);\n\n    texture._isTextureCleared = false;\n}\n\nfunction clearTexture(gl, texture) {\n    // A quick check to ensure we don't call 'texImage2D' when the texture has already been 'cleared' #performance\n    if (!texture._isTextureCleared) {\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 0, 0]));\n\n        texture._isTextureCleared = true;\n    }\n}\n\nfunction generateRandomId() {\n    var appearanceAdjective = [\"adorable\", \"alert\", \"average\", \"beautiful\", \"blonde\", \"bloody\", \"blushing\", \"bright\", \"clean\", \"clear\", \"cloudy\", \"colourful\", \"concerned\", \"crowded\", \"curious\", \"cute\", \"dark\", \"dirty\", \"drab\", \"distinct\", \"dull\", \"elegant\", \"fancy\", \"filthy\", \"glamorous\", \"gleaming\", \"graceful\", \"grotesque\", \"homely\", \"light\", \"misty\", \"motionless\", \"muddy\", \"plain\", \"poised\", \"quaint\", \"scary\", \"shiny\", \"smoggy\", \"sparkling\", \"spotless\", \"stormy\", \"strange\", \"ugly\", \"unsightly\", \"unusual\"];\n    var conditionAdjective = [\"alive\", \"brainy\", \"broken\", \"busy\", \"careful\", \"cautious\", \"clever\", \"crazy\", \"damaged\", \"dead\", \"difficult\", \"easy\", \"fake\", \"false\", \"famous\", \"forward\", \"fragile\", \"guilty\", \"helpful\", \"helpless\", \"important\", \"impossible\", \"infamous\", \"innocent\", \"inquisitive\", \"mad\", \"modern\", \"open\", \"outgoing\", \"outstanding\", \"poor\", \"powerful\", \"puzzled\", \"real\", \"rich\", \"right\", \"robust\", \"sane\", \"scary\", \"shy\", \"sleepy\", \"stupid\", \"super\", \"tame\", \"thick\", \"tired\", \"wild\", \"wrong\"];\n    var nounAnimal = [\"manatee\", \"gila monster\", \"nematode\", \"seahorse\", \"slug\", \"koala bear\", \"giant tortoise\", \"garden snail\", \"starfish\", \"sloth\", \"american woodcock\", \"coral\", \"swallowtail butterfly\", \"house sparrow\", \"sea anemone\"];\n\n    function randomChoice(array) {\n        return array[Math.floor(Math.random() * array.length)];\n    }\n\n    function capitalize(word) {\n        word = word.replace(/\\b\\w/g, function (l) {\n            return l.toUpperCase();\n        });\n        return word;\n    }\n\n    var name = randomChoice(appearanceAdjective) + \" \" + randomChoice(conditionAdjective) + \" \" + randomChoice(nounAnimal);\n    name = capitalize(name);\n    name = name.replace(/ /g, \"-\");\n    return name;\n}\n\nfunction exportToJSON(vc) {\n    console.warn(\"VideoContext.exportToJSON has been deprecated. Please use VideoContext.snapshot instead.\");\n    return JSON.stringify(snapshotNodes(vc));\n}\n\nfunction snapshot(vc) {\n    return {\n        nodes: snapshotNodes(vc),\n        videoContext: snapshotVideoContext(vc)\n    };\n}\n\nfunction snapshotVideoContext(vc) {\n    return {\n        currentTime: vc.currentTime,\n        duration: vc.duration,\n        state: vc.state,\n        playbackRate: vc.playbackRate\n    };\n}\n\nvar warningExportSourceLogged = false;\nfunction snapshotNodes(vc) {\n    function qualifyURL(url) {\n        var a = document.createElement(\"a\");\n        a.href = url;\n        return a.href;\n    }\n\n    function getInputIDs(node, vc) {\n        var inputs = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = node.inputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var input = _step.value;\n\n                if (input === undefined) continue;\n                var inputID = void 0;\n                var inputIndex = node.inputs.indexOf(input);\n                var index = vc._processingNodes.indexOf(input);\n                if (index > -1) {\n                    inputID = \"processor\" + index;\n                } else {\n                    var _index = vc._sourceNodes.indexOf(input);\n                    if (_index > -1) {\n                        inputID = \"source\" + _index;\n                    } else {\n                        console.log(\"Warning, can't find input\", input);\n                    }\n                }\n                inputs.push({ id: inputID, index: inputIndex });\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return inputs;\n    }\n\n    var result = {};\n\n    var sourceNodeStateMapping = [];\n    for (var state in _sourcenode.SOURCENODESTATE) {\n        sourceNodeStateMapping[_sourcenode.SOURCENODESTATE[state]] = state;\n    }\n\n    for (var index in vc._sourceNodes) {\n        var source = vc._sourceNodes[index];\n        var id = \"source\" + index;\n        var node_url = \"\";\n\n        if (!source._isResponsibleForElementLifeCycle) {\n            if (!warningExportSourceLogged) {\n                console.debug(\"Warning - Trying to export source created from an element not a URL. URL of export will be set to the elements src attribute and may be incorrect\", source);\n                warningExportSourceLogged = true;\n            }\n            node_url = source.element.src;\n        } else {\n            node_url = qualifyURL(source._elementURL);\n        }\n\n        var node = {\n            type: source.displayName,\n            url: node_url,\n            start: source.startTime,\n            stop: source.stopTime,\n            state: sourceNodeStateMapping[source.state]\n        };\n        if (node.type === _videonode.VIDEOTYPE) {\n            node.currentTime = null;\n            if (source.element && source.element.currentTime) {\n                node.currentTime = source.element.currentTime;\n            }\n        }\n\n        if (source._sourceOffset) {\n            node.sourceOffset = source._sourceOffset;\n        }\n        result[id] = node;\n    }\n\n    for (var _index2 in vc._processingNodes) {\n        var processor = vc._processingNodes[_index2];\n        var _id = \"processor\" + _index2;\n        var _node = {\n            type: processor.displayName,\n            definition: processor._definition,\n            inputs: getInputIDs(processor, vc),\n            properties: {}\n        };\n\n        for (var property in _node.definition.properties) {\n            _node.properties[property] = processor[property];\n        }\n\n        if (_node.type === _transitionnode.TRANSITIONTYPE) {\n            _node.transitions = processor._transitions;\n        }\n\n        result[_id] = _node;\n    }\n\n    result[\"destination\"] = {\n        type: \"Destination\",\n        inputs: getInputIDs(vc.destination, vc)\n    };\n\n    return result;\n}\n\nfunction createControlFormForNode(node, nodeName) {\n    var rootDiv = document.createElement(\"div\");\n\n    if (nodeName !== undefined) {\n        var title = document.createElement(\"h2\");\n        title.innerHTML = nodeName;\n        rootDiv.appendChild(title);\n    }\n\n    var _loop = function _loop(propertyName) {\n        var propertyParagraph = document.createElement(\"p\");\n        var propertyTitleHeader = document.createElement(\"h3\");\n        propertyTitleHeader.innerHTML = propertyName;\n        propertyParagraph.appendChild(propertyTitleHeader);\n\n        var propertyValue = node._properties[propertyName].value;\n        if (typeof propertyValue === \"number\") {\n            var range = document.createElement(\"input\");\n            range.setAttribute(\"type\", \"range\");\n            range.setAttribute(\"min\", \"0\");\n            range.setAttribute(\"max\", \"1\");\n            range.setAttribute(\"step\", \"0.01\");\n            range.setAttribute(\"value\", propertyValue, toString());\n\n            var number = document.createElement(\"input\");\n            number.setAttribute(\"type\", \"number\");\n            number.setAttribute(\"min\", \"0\");\n            number.setAttribute(\"max\", \"1\");\n            number.setAttribute(\"step\", \"0.01\");\n            number.setAttribute(\"value\", propertyValue, toString());\n\n            var mouseDown = false;\n            range.onmousedown = function () {\n                mouseDown = true;\n            };\n            range.onmouseup = function () {\n                mouseDown = false;\n            };\n            range.onmousemove = function () {\n                if (mouseDown) {\n                    node[propertyName] = parseFloat(range.value);\n                    number.value = range.value;\n                }\n            };\n            range.onchange = function () {\n                node[propertyName] = parseFloat(range.value);\n                number.value = range.value;\n            };\n            number.onchange = function () {\n                node[propertyName] = parseFloat(number.value);\n                range.value = number.value;\n            };\n            propertyParagraph.appendChild(range);\n            propertyParagraph.appendChild(number);\n        } else if (Object.prototype.toString.call(propertyValue) === \"[object Array]\") {\n            var _loop2 = function _loop2() {\n                var range = document.createElement(\"input\");\n                range.setAttribute(\"type\", \"range\");\n                range.setAttribute(\"min\", \"0\");\n                range.setAttribute(\"max\", \"1\");\n                range.setAttribute(\"step\", \"0.01\");\n                range.setAttribute(\"value\", propertyValue[i], toString());\n\n                var number = document.createElement(\"input\");\n                number.setAttribute(\"type\", \"number\");\n                number.setAttribute(\"min\", \"0\");\n                number.setAttribute(\"max\", \"1\");\n                number.setAttribute(\"step\", \"0.01\");\n                number.setAttribute(\"value\", propertyValue, toString());\n\n                var index = i;\n                var mouseDown = false;\n                range.onmousedown = function () {\n                    mouseDown = true;\n                };\n                range.onmouseup = function () {\n                    mouseDown = false;\n                };\n                range.onmousemove = function () {\n                    if (mouseDown) {\n                        node[propertyName][index] = parseFloat(range.value);\n                        number.value = range.value;\n                    }\n                };\n                range.onchange = function () {\n                    node[propertyName][index] = parseFloat(range.value);\n                    number.value = range.value;\n                };\n\n                number.onchange = function () {\n                    node[propertyName][index] = parseFloat(number.value);\n                    range.value = number.value;\n                };\n                propertyParagraph.appendChild(range);\n                propertyParagraph.appendChild(number);\n            };\n\n            for (i = 0; i < propertyValue.length; i++) {\n                _loop2();\n            }\n        }\n\n        rootDiv.appendChild(propertyParagraph);\n    };\n\n    for (var propertyName in node._properties) {\n        var i;\n\n        _loop(propertyName);\n    }\n    return rootDiv;\n}\n\nfunction calculateNodeDepthFromDestination(videoContext) {\n    var destination = videoContext.destination;\n    var depthMap = new Map();\n    depthMap.set(destination, 0);\n\n    function itterateBackwards(node) {\n        var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n            for (var _iterator2 = node.inputs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var n = _step2.value;\n\n                var d = depth + 1;\n                if (depthMap.has(n)) {\n                    if (d > depthMap.get(n)) {\n                        depthMap.set(n, d);\n                    }\n                } else {\n                    depthMap.set(n, d);\n                }\n                itterateBackwards(n, depthMap.get(n));\n            }\n        } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                    _iterator2.return();\n                }\n            } finally {\n                if (_didIteratorError2) {\n                    throw _iteratorError2;\n                }\n            }\n        }\n    }\n\n    itterateBackwards(destination);\n    return depthMap;\n}\n\nfunction visualiseVideoContextGraph(videoContext, canvas) {\n    var ctx = canvas.getContext(\"2d\");\n    var w = canvas.width;\n    var h = canvas.height;\n    ctx.clearRect(0, 0, w, h);\n\n    var nodeDepths = calculateNodeDepthFromDestination(videoContext);\n    var depths = nodeDepths.values();\n    depths = Array.from(depths).sort(function (a, b) {\n        return b - a;\n    });\n    var maxDepth = depths[0];\n\n    var xStep = w / (maxDepth + 1);\n\n    var nodeHeight = h / videoContext._sourceNodes.length / 3;\n    var nodeWidth = nodeHeight * 1.618;\n\n    function calculateNodePos(node, nodeDepths, xStep, nodeHeight) {\n        var depth = nodeDepths.get(node);\n        nodeDepths.values();\n\n        var count = 0;\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n            for (var _iterator3 = nodeDepths[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var nodeDepth = _step3.value;\n\n                if (nodeDepth[0] === node) break;\n                if (nodeDepth[1] === depth) count += 1;\n            }\n        } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                    _iterator3.return();\n                }\n            } finally {\n                if (_didIteratorError3) {\n                    throw _iteratorError3;\n                }\n            }\n        }\n\n        return {\n            x: xStep * nodeDepths.get(node),\n            y: nodeHeight * 1.5 * count + 50\n        };\n    }\n\n    // \"video\":[\"#572A72\", \"#3C1255\"],\n    // \"image\":[\"#7D9F35\", \"#577714\"],\n    // \"canvas\":[\"#AA9639\", \"#806D15\"]\n\n    for (var i = 0; i < videoContext._renderGraph.connections.length; i++) {\n        var conn = videoContext._renderGraph.connections[i];\n        var source = calculateNodePos(conn.source, nodeDepths, xStep, nodeHeight);\n        var destination = calculateNodePos(conn.destination, nodeDepths, xStep, nodeHeight);\n        if (source !== undefined && destination !== undefined) {\n            ctx.beginPath();\n            //ctx.moveTo(source.x + nodeWidth/2, source.y + nodeHeight/2);\n            var x1 = source.x + nodeWidth / 2;\n            var y1 = source.y + nodeHeight / 2;\n            var x2 = destination.x + nodeWidth / 2;\n            var y2 = destination.y + nodeHeight / 2;\n            var dx = x2 - x1;\n            var dy = y2 - y1;\n\n            var angle = Math.PI / 2 - Math.atan2(dx, dy);\n\n            var distance = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n\n            var midX = Math.min(x1, x2) + (Math.max(x1, x2) - Math.min(x1, x2)) / 2;\n            var midY = Math.min(y1, y2) + (Math.max(y1, y2) - Math.min(y1, y2)) / 2;\n\n            var testX = Math.cos(angle + Math.PI / 2) * distance / 1.5 + midX;\n            var testY = Math.sin(angle + Math.PI / 2) * distance / 1.5 + midY;\n            // console.log(testX, testY);\n\n            ctx.arc(testX, testY, distance / 1.2, angle - Math.PI + 0.95, angle - 0.95);\n\n            //ctx.arcTo(source.x + nodeWidth/2 ,source.y + nodeHeight/2,destination.x + nodeWidth/2,destination.y + nodeHeight/2,100);\n            //ctx.lineTo(midX, midY);\n            ctx.stroke();\n            //ctx.endPath();\n        }\n    }\n\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n        for (var _iterator4 = nodeDepths.keys()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var node = _step4.value;\n\n            var pos = calculateNodePos(node, nodeDepths, xStep, nodeHeight);\n            var color = \"#AA9639\";\n            var text = \"\";\n            if (node.displayName === _compositingnode.COMPOSITINGTYPE) {\n                color = \"#000000\";\n            }\n            if (node.displayName === _destinationnode.DESTINATIONTYPE) {\n                color = \"#7D9F35\";\n                text = \"Output\";\n            }\n            if (node.displayName === _videonode.VIDEOTYPE) {\n                color = \"#572A72\";\n                text = \"Video\";\n            }\n            if (node.displayName === _canvasnode.CANVASTYPE) {\n                color = \"#572A72\";\n                text = \"Canvas\";\n            }\n            if (node.displayName === _imagenode.IMAGETYPE) {\n                color = \"#572A72\";\n                text = \"Image\";\n            }\n            ctx.beginPath();\n            ctx.fillStyle = color;\n            ctx.fillRect(pos.x, pos.y, nodeWidth, nodeHeight);\n            ctx.fill();\n\n            ctx.fillStyle = \"#000\";\n            ctx.textAlign = \"center\";\n            ctx.font = \"10px Arial\";\n            ctx.fillText(text, pos.x + nodeWidth / 2, pos.y + nodeHeight / 2 + 2.5);\n            ctx.fill();\n        }\n    } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                _iterator4.return();\n            }\n        } finally {\n            if (_didIteratorError4) {\n                throw _iteratorError4;\n            }\n        }\n    }\n\n    return;\n}\n\nfunction createSigmaGraphDataFromRenderGraph(videoContext) {\n    function idForNode(node) {\n        if (videoContext._sourceNodes.indexOf(node) !== -1) {\n            var _id2 = \"source \" + node.displayName + \" \" + videoContext._sourceNodes.indexOf(node);\n            return _id2;\n        }\n        var id = \"processor \" + node.displayName + \" \" + videoContext._processingNodes.indexOf(node);\n        return id;\n    }\n\n    var graph = {\n        nodes: [{\n            id: idForNode(videoContext.destination),\n            label: \"Destination Node\",\n            x: 2.5,\n            y: 0.5,\n            size: 2,\n            node: videoContext.destination\n        }],\n        edges: []\n    };\n\n    for (var i = 0; i < videoContext._sourceNodes.length; i++) {\n        var sourceNode = videoContext._sourceNodes[i];\n        var y = i * (1.0 / videoContext._sourceNodes.length);\n        graph.nodes.push({\n            id: idForNode(sourceNode),\n            label: \"Source \" + i.toString(),\n            x: 0,\n            y: y,\n            size: 2,\n            color: \"#572A72\",\n            node: sourceNode\n        });\n    }\n    for (var _i = 0; _i < videoContext._processingNodes.length; _i++) {\n        var processingNode = videoContext._processingNodes[_i];\n        graph.nodes.push({\n            id: idForNode(processingNode),\n            x: Math.random() * 2.5,\n            y: Math.random(),\n            size: 2,\n            node: processingNode\n        });\n    }\n\n    for (var _i2 = 0; _i2 < videoContext._renderGraph.connections.length; _i2++) {\n        var conn = videoContext._renderGraph.connections[_i2];\n        graph.edges.push({\n            id: \"e\" + _i2.toString(),\n            source: idForNode(conn.source),\n            target: idForNode(conn.destination)\n        });\n    }\n\n    return graph;\n}\n\nfunction importSimpleEDL(ctx, playlist) {\n    // Create a \"track\" node to connect all the clips to.\n    var trackNode = ctx.compositor(_definitions2.default.COMBINE);\n\n    // Create a source node for each of the clips.\n    var _iteratorNormalCompletion5 = true;\n    var _didIteratorError5 = false;\n    var _iteratorError5 = undefined;\n\n    try {\n        for (var _iterator5 = playlist[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            var clip = _step5.value;\n\n            var node = void 0;\n            if (clip.type === \"video\") {\n                node = ctx.video(clip.src, clip.sourceStart);\n            } else if (clip.type === \"image\") {\n                node = ctx.image(clip.src, clip.sourceStart);\n            } else {\n                console.debug(\"Clip type \" + clip.type + \" not recognised, skipping.\");\n                continue;\n            }\n            node.startAt(clip.start);\n            node.stopAt(clip.start + clip.duration);\n            node.connect(trackNode);\n        }\n    } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                _iterator5.return();\n            }\n        } finally {\n            if (_didIteratorError5) {\n                throw _iteratorError5;\n            }\n        }\n    }\n\n    return trackNode;\n}\n\nfunction visualiseVideoContextTimeline(videoContext, canvas, currentTime) {\n    var ctx = canvas.getContext(\"2d\");\n    var w = canvas.width;\n    var h = canvas.height;\n    var trackHeight = h / videoContext._sourceNodes.length;\n    var playlistDuration = videoContext.duration;\n\n    if (currentTime > playlistDuration && !videoContext.endOnLastSourceEnd) playlistDuration = currentTime;\n\n    if (videoContext.duration === Infinity) {\n        var total = 0;\n        for (var i = 0; i < videoContext._sourceNodes.length; i++) {\n            var sourceNode = videoContext._sourceNodes[i];\n            if (sourceNode._stopTime !== Infinity) total += sourceNode._stopTime;\n        }\n\n        if (total > videoContext.currentTime) {\n            playlistDuration = total + 5;\n        } else {\n            playlistDuration = videoContext.currentTime + 5;\n        }\n    }\n    var pixelsPerSecond = w / playlistDuration;\n    var mediaSourceStyle = {\n        video: [\"#572A72\", \"#3C1255\"],\n        image: [\"#7D9F35\", \"#577714\"],\n        canvas: [\"#AA9639\", \"#806D15\"]\n    };\n\n    ctx.clearRect(0, 0, w, h);\n    ctx.fillStyle = \"#999\";\n\n    var _iteratorNormalCompletion6 = true;\n    var _didIteratorError6 = false;\n    var _iteratorError6 = undefined;\n\n    try {\n        for (var _iterator6 = videoContext._processingNodes[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n            var node = _step6.value;\n\n            if (node.displayName !== _transitionnode.TRANSITIONTYPE) continue;\n            for (var propertyName in node._transitions) {\n                var _iteratorNormalCompletion7 = true;\n                var _didIteratorError7 = false;\n                var _iteratorError7 = undefined;\n\n                try {\n                    for (var _iterator7 = node._transitions[propertyName][Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                        var transition = _step7.value;\n\n                        var tW = (transition.end - transition.start) * pixelsPerSecond;\n                        var tH = h;\n                        var tX = transition.start * pixelsPerSecond;\n                        var tY = 0;\n                        ctx.fillStyle = \"rgba(0,0,0, 0.3)\";\n                        ctx.fillRect(tX, tY, tW, tH);\n                        ctx.fill();\n                    }\n                } catch (err) {\n                    _didIteratorError7 = true;\n                    _iteratorError7 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                            _iterator7.return();\n                        }\n                    } finally {\n                        if (_didIteratorError7) {\n                            throw _iteratorError7;\n                        }\n                    }\n                }\n            }\n        }\n    } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                _iterator6.return();\n            }\n        } finally {\n            if (_didIteratorError6) {\n                throw _iteratorError6;\n            }\n        }\n    }\n\n    for (var _i3 = 0; _i3 < videoContext._sourceNodes.length; _i3++) {\n        var _sourceNode = videoContext._sourceNodes[_i3];\n        var duration = _sourceNode._stopTime - _sourceNode._startTime;\n        if (duration === Infinity) duration = videoContext.currentTime;\n        var start = _sourceNode._startTime;\n\n        var msW = duration * pixelsPerSecond;\n        var msH = trackHeight;\n        var msX = start * pixelsPerSecond;\n        var msY = trackHeight * _i3;\n        ctx.fillStyle = mediaSourceStyle.video[_i3 % mediaSourceStyle.video.length];\n\n        ctx.fillRect(msX, msY, msW, msH);\n        ctx.fill();\n    }\n\n    if (currentTime !== undefined) {\n        ctx.fillStyle = \"#000\";\n        ctx.fillRect(currentTime * pixelsPerSecond, 0, 1, h);\n    }\n}\n\nvar UpdateablesManager = exports.UpdateablesManager = function () {\n    function UpdateablesManager() {\n        _classCallCheck(this, UpdateablesManager);\n\n        this._updateables = [];\n        this._useWebworker = false;\n        this._active = false;\n        this._previousRAFTime = undefined;\n        this._previousWorkerTime = undefined;\n\n        this._webWorkerString = \"\\\n            var running = false;\\\n            function tick(){\\\n                postMessage(Date.now());\\\n                if (running){\\\n                    setTimeout(tick, 1000/20);\\\n                }\\\n            }\\\n            self.addEventListener('message',function(msg){\\\n                var data = msg.data;\\\n                if (data === 'start'){\\\n                    running = true;\\\n                    tick();\\\n                }\\\n                if (data === 'stop') running = false;\\\n            });\";\n        this._webWorker = undefined;\n    }\n\n    _createClass(UpdateablesManager, [{\n        key: \"_initWebWorker\",\n        value: function _initWebWorker() {\n            var _this = this;\n\n            window.URL = window.URL || window.webkitURL;\n            var blob = new Blob([this._webWorkerString], {\n                type: \"application/javascript\"\n            });\n            this._webWorker = new Worker(URL.createObjectURL(blob));\n            this._webWorker.onmessage = function (msg) {\n                var time = msg.data;\n                _this._updateWorkerTime(time);\n            };\n        }\n    }, {\n        key: \"_lostVisibility\",\n        value: function _lostVisibility() {\n            this._previousWorkerTime = Date.now();\n            this._useWebworker = true;\n            if (!this._webWorker) {\n                this._initWebWorker();\n            }\n            this._webWorker.postMessage(\"start\");\n        }\n    }, {\n        key: \"_gainedVisibility\",\n        value: function _gainedVisibility() {\n            this._useWebworker = false;\n            this._previousRAFTime = undefined;\n            if (this._webWorker) this._webWorker.postMessage(\"stop\");\n            requestAnimationFrame(this._updateRAFTime.bind(this));\n        }\n    }, {\n        key: \"_init\",\n        value: function _init() {\n            var _this2 = this;\n\n            if (!window.Worker) return;\n\n            //If page visibility API not present fallback to using \"focus\" and \"blur\" event listeners.\n            if (typeof document.hidden === \"undefined\") {\n                window.addEventListener(\"focus\", this._gainedVisibility.bind(this));\n                window.addEventListener(\"blur\", this._lostVisibility.bind(this));\n                return;\n            }\n            //Otherwise we can use the visibility API to do the loose/gain focus properly\n            document.addEventListener(\"visibilitychange\", function () {\n                if (document.hidden === true) {\n                    _this2._lostVisibility();\n                } else {\n                    _this2._gainedVisibility();\n                }\n            }, false);\n\n            requestAnimationFrame(this._updateRAFTime.bind(this));\n        }\n    }, {\n        key: \"_updateWorkerTime\",\n        value: function _updateWorkerTime(time) {\n            var dt = (time - this._previousWorkerTime) / 1000;\n            if (dt !== 0) this._update(dt);\n            this._previousWorkerTime = time;\n        }\n    }, {\n        key: \"_updateRAFTime\",\n        value: function _updateRAFTime(time) {\n            if (this._previousRAFTime === undefined) this._previousRAFTime = time;\n            var dt = (time - this._previousRAFTime) / 1000;\n            if (dt !== 0) this._update(dt);\n            this._previousRAFTime = time;\n            if (!this._useWebworker) requestAnimationFrame(this._updateRAFTime.bind(this));\n        }\n    }, {\n        key: \"_update\",\n        value: function _update(dt) {\n            for (var i = 0; i < this._updateables.length; i++) {\n                this._updateables[i]._update(parseFloat(dt));\n            }\n        }\n    }, {\n        key: \"register\",\n        value: function register(updateable) {\n            this._updateables.push(updateable);\n            if (this._active === false) {\n                this._active = true;\n                this._init();\n            }\n        }\n    }]);\n\n    return UpdateablesManager;\n}();\n\nfunction mediaElementHasSource(_ref) {\n    var src = _ref.src,\n        srcObject = _ref.srcObject;\n\n    return !((src === \"\" || src === undefined) && srcObject == null);\n}\n\n/***/ }),\n\n/***/ \"./src/videocontext.js\":\n/*!*****************************!*\\\n  !*** ./src/videocontext.js ***!\n  \\*****************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_238201__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //Matthew Shotton, R&D User Experience,© BBC 2015\n\n\nvar _utils = __nested_webpack_require_238201__(/*! ./utils.js */ \"./src/utils.js\");\n\nvar _nodes = __nested_webpack_require_238201__(/*! ./SourceNodes/nodes.js */ \"./src/SourceNodes/nodes.js\");\n\nvar _nodes2 = _interopRequireDefault(_nodes);\n\nvar _videonode = __nested_webpack_require_238201__(/*! ./SourceNodes/videonode.js */ \"./src/SourceNodes/videonode.js\");\n\nvar _videonode2 = _interopRequireDefault(_videonode);\n\nvar _audionode = __nested_webpack_require_238201__(/*! ./SourceNodes/audionode.js */ \"./src/SourceNodes/audionode.js\");\n\nvar _audionode2 = _interopRequireDefault(_audionode);\n\nvar _imagenode = __nested_webpack_require_238201__(/*! ./SourceNodes/imagenode.js */ \"./src/SourceNodes/imagenode.js\");\n\nvar _imagenode2 = _interopRequireDefault(_imagenode);\n\nvar _canvasnode = __nested_webpack_require_238201__(/*! ./SourceNodes/canvasnode.js */ \"./src/SourceNodes/canvasnode.js\");\n\nvar _canvasnode2 = _interopRequireDefault(_canvasnode);\n\nvar _sourcenode = __nested_webpack_require_238201__(/*! ./SourceNodes/sourcenode.js */ \"./src/SourceNodes/sourcenode.js\");\n\nvar _compositingnode = __nested_webpack_require_238201__(/*! ./ProcessingNodes/compositingnode.js */ \"./src/ProcessingNodes/compositingnode.js\");\n\nvar _compositingnode2 = _interopRequireDefault(_compositingnode);\n\nvar _destinationnode = __nested_webpack_require_238201__(/*! ./DestinationNode/destinationnode.js */ \"./src/DestinationNode/destinationnode.js\");\n\nvar _destinationnode2 = _interopRequireDefault(_destinationnode);\n\nvar _effectnode = __nested_webpack_require_238201__(/*! ./ProcessingNodes/effectnode.js */ \"./src/ProcessingNodes/effectnode.js\");\n\nvar _effectnode2 = _interopRequireDefault(_effectnode);\n\nvar _transitionnode = __nested_webpack_require_238201__(/*! ./ProcessingNodes/transitionnode.js */ \"./src/ProcessingNodes/transitionnode.js\");\n\nvar _transitionnode2 = _interopRequireDefault(_transitionnode);\n\nvar _rendergraph = __nested_webpack_require_238201__(/*! ./rendergraph.js */ \"./src/rendergraph.js\");\n\nvar _rendergraph2 = _interopRequireDefault(_rendergraph);\n\nvar _videoelementcache = __nested_webpack_require_238201__(/*! ./videoelementcache.js */ \"./src/videoelementcache.js\");\n\nvar _videoelementcache2 = _interopRequireDefault(_videoelementcache);\n\nvar _definitions = __nested_webpack_require_238201__(/*! ./Definitions/definitions.js */ \"./src/Definitions/definitions.js\");\n\nvar _definitions2 = _interopRequireDefault(_definitions);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar updateablesManager = new _utils.UpdateablesManager();\n\n/**\n * VideoContext.\n * @module VideoContext\n */\n\nvar VideoContext = function () {\n    /**\n     * Initialise the VideoContext and render to the specific canvas. A 2nd parameter can be passed to the constructor which is a function that get's called if the VideoContext fails to initialise.\n     *\n     * @param {Canvas} canvas - the canvas element to render the output to.\n     * @param {function} [initErrorCallback] - a callback for if initialising the canvas failed.\n     * @param {Object} [options] - a number of custom options which can be set on the VideoContext, generally best left as default.\n     * @param {boolean} [options.manualUpdate=false] - Make Video Context not use the updatable manager\n     * @param {boolean} [options.endOnLastSourceEnd=true] - Trigger an `ended` event when the current time goes above the duration of the composition\n     * @param {boolean} [options.useVideoElementCache=true] - Creates a pool of video element that will be all initialised at the same time. Important for mobile support\n     * @param {number} [options.videoElementCacheSize=6] - Number of video element in the pool\n     * @param {object} [options.webglContextAttributes] - A set of attributes used when getting the GL context. Alpha will always be `true`.\n     *\n     * @example\n     * var canvasElement = document.getElementById(\"canvas\");\n     * var ctx = new VideoContext(canvasElement, () => console.error(\"Sorry, your browser dosen\\'t support WebGL\"));\n     * var videoNode = ctx.video(\"video.mp4\");\n     * videoNode.connect(ctx.destination);\n     * videoNode.start(0);\n     * videoNode.stop(10);\n     * ctx.play();\n     *\n     */\n    function VideoContext(canvas, initErrorCallback) {\n        var _this = this;\n\n        var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n            _ref$manualUpdate = _ref.manualUpdate,\n            manualUpdate = _ref$manualUpdate === undefined ? false : _ref$manualUpdate,\n            _ref$endOnLastSourceE = _ref.endOnLastSourceEnd,\n            endOnLastSourceEnd = _ref$endOnLastSourceE === undefined ? true : _ref$endOnLastSourceE,\n            _ref$useVideoElementC = _ref.useVideoElementCache,\n            useVideoElementCache = _ref$useVideoElementC === undefined ? true : _ref$useVideoElementC,\n            _ref$videoElementCach = _ref.videoElementCacheSize,\n            videoElementCacheSize = _ref$videoElementCach === undefined ? 6 : _ref$videoElementCach,\n            _ref$webglContextAttr = _ref.webglContextAttributes,\n            webglContextAttributes = _ref$webglContextAttr === undefined ? {} : _ref$webglContextAttr;\n\n        _classCallCheck(this, VideoContext);\n\n        this._canvas = canvas;\n        this._endOnLastSourceEnd = endOnLastSourceEnd;\n\n        this._gl = canvas.getContext(\"webgl2\", Object.assign({ preserveDrawingBuffer: true }, // can be overriden\n        webglContextAttributes, { alpha: false // Can't be overriden because it is copied last\n        }));\n        if (this._gl === null) {\n            console.error(\"Failed to intialise WebGL.\");\n            if (initErrorCallback) initErrorCallback();\n            return;\n        }\n\n        // Initialise the video element cache\n        this._useVideoElementCache = useVideoElementCache;\n        if (this._useVideoElementCache) {\n            this._videoElementCache = new _videoelementcache2.default(videoElementCacheSize);\n        }\n\n        // Create a unique ID for this VideoContext which can be used in the debugger.\n        if (this._canvas.id) {\n            if (typeof this._canvas.id === \"string\" || this._canvas.id instanceof String) {\n                this._id = canvas.id;\n            }\n        }\n        if (this._id === undefined) this._id = (0, _utils.generateRandomId)();\n        if (window.__VIDEOCONTEXT_REFS__ === undefined) window.__VIDEOCONTEXT_REFS__ = {};\n        window.__VIDEOCONTEXT_REFS__[this._id] = this;\n\n        this._renderGraph = new _rendergraph2.default();\n        this._sourceNodes = [];\n        this._processingNodes = [];\n        this._timeline = [];\n        this._currentTime = 0;\n        this._state = VideoContext.STATE.PAUSED;\n        this._playbackRate = 1.0;\n        this._volume = 1.0;\n        this._sourcesPlaying = undefined;\n        this._destinationNode = new _destinationnode2.default(this._gl, this._renderGraph);\n\n        this._callbacks = new Map();\n        Object.keys(VideoContext.EVENTS).forEach(function (name) {\n            return _this._callbacks.set(VideoContext.EVENTS[name], []);\n        });\n\n        this._timelineCallbacks = [];\n\n        if (!manualUpdate) {\n            updateablesManager.register(this);\n        }\n    }\n\n    /**\n     * Returns an ID assigned to the VideoContext instance. This will either be the same id as the underlying canvas element,\n     * or a uniquely generated one.\n     */\n\n\n    _createClass(VideoContext, [{\n        key: \"registerTimelineCallback\",\n\n\n        /**\n         * Register a callback to happen at a specific point in time.\n         * @param {number} time - the time at which to trigger the callback.\n         * @param {Function} func - the callback to register.\n         * @param {number} ordering - the order in which to call the callback if more than one is registered for the same time.\n         */\n        value: function registerTimelineCallback(time, func) {\n            var ordering = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n            this._timelineCallbacks.push({\n                time: time,\n                func: func,\n                ordering: ordering\n            });\n        }\n\n        /**\n         * Unregister a callback which happens at a specific point in time.\n         * @param {Function} func - the callback to unregister.\n         */\n\n    }, {\n        key: \"unregisterTimelineCallback\",\n        value: function unregisterTimelineCallback(func) {\n            var toRemove = [];\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = this._timelineCallbacks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var callback = _step.value;\n\n                    if (callback.func === func) {\n                        toRemove.push(callback);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = toRemove[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var _callback = _step2.value;\n\n                    var index = this._timelineCallbacks.indexOf(_callback);\n                    this._timelineCallbacks.splice(index, 1);\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Register a callback to listen to one of the events defined in `VideoContext.EVENTS`\n         *\n         * @param {String} type - the event to register against.\n         * @param {Function} func - the callback to register.\n         *\n         * @example\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var ctx = new VideoContext(canvasElement);\n         * ctx.registerCallback(VideoContext.EVENTS.STALLED, () => console.log(\"Playback stalled\"));\n         * ctx.registerCallback(VideoContext.EVENTS.UPDATE, () => console.log(\"new frame\"));\n         * ctx.registerCallback(VideoContext.EVENTS.ENDED, () => console.log(\"Playback ended\"));\n         */\n\n    }, {\n        key: \"registerCallback\",\n        value: function registerCallback(type, func) {\n            if (!this._callbacks.has(type)) return false;\n            this._callbacks.get(type).push(func);\n        }\n\n        /**\n         * Remove a previously registered callback\n         *\n         * @param {Function} func - the callback to remove.\n         *\n         * @example\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var ctx = new VideoContext(canvasElement);\n         *\n         * //the callback\n         * var updateCallback = () => console.log(\"new frame\");\n         *\n         * //register the callback\n         * ctx.registerCallback(VideoContext.EVENTS.UPDATE, updateCallback);\n         * //then unregister it\n         * ctx.unregisterCallback(updateCallback);\n         *\n         */\n\n    }, {\n        key: \"unregisterCallback\",\n        value: function unregisterCallback(func) {\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = this._callbacks.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var funcArray = _step3.value;\n\n                    var index = funcArray.indexOf(func);\n                    if (index !== -1) {\n                        funcArray.splice(index, 1);\n                        return true;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n\n            return false;\n        }\n    }, {\n        key: \"_callCallbacks\",\n        value: function _callCallbacks(type) {\n            var funcArray = this._callbacks.get(type);\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n                for (var _iterator4 = funcArray[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var func = _step4.value;\n\n                    func(this._currentTime);\n                }\n            } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                        _iterator4.return();\n                    }\n                } finally {\n                    if (_didIteratorError4) {\n                        throw _iteratorError4;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Get the canvas that the VideoContext is using.\n         *\n         * @return {HTMLCanvasElement} The canvas that the VideoContext is using.\n         *\n         */\n\n    }, {\n        key: \"play\",\n\n\n        /**\n         * Start the VideoContext playing\n         * @example\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var ctx = new VideoContext(canvasElement);\n         * var videoNode = ctx.video(\"video.mp4\");\n         * videoNode.connect(ctx.destination);\n         * videoNode.start(0);\n         * videoNode.stop(10);\n         * ctx.play();\n         */\n        value: function play() {\n            console.debug(\"VideoContext - playing\");\n            //Initialise the video element cache\n            if (this._videoElementCache) this._videoElementCache.init();\n            // set the state.\n            this._state = VideoContext.STATE.PLAYING;\n            return true;\n        }\n\n        /**\n         * Pause playback of the VideoContext\n         * @example\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var ctx = new VideoContext(canvasElement);\n         * var videoNode = ctx.video(\"video.mp4\");\n         * videoNode.connect(ctx.destination);\n         * videoNode.start(0);\n         * videoNode.stop(20);\n         * ctx.currentTime = 10; // seek 10 seconds in\n         * ctx.play();\n         * setTimeout(() => ctx.pause(), 1000); //pause playback after roughly one second.\n         */\n\n    }, {\n        key: \"pause\",\n        value: function pause() {\n            console.debug(\"VideoContext - pausing\");\n            this._state = VideoContext.STATE.PAUSED;\n            return true;\n        }\n\n        /**\n         * Create a new node representing a video source\n         *\n         * @param {string|HTMLVideoElement|MediaStream} - The URL or video element to create the video from.\n         * @param {number} [sourceOffset=0] - Offset into the start of the source video to start playing from.\n         * @param {number} [preloadTime=4] - How many seconds before the video is to be played to start loading it.\n         * @param {Object} [videoElementAttributes] - A dictionary of attributes to map onto the underlying video element.\n         * @return {VideoNode} A new video node.\n         *\n         * @example\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var ctx = new VideoContext(canvasElement);\n         * var videoNode = ctx.video(\"bigbuckbunny.mp4\");\n         */\n\n    }, {\n        key: \"video\",\n        value: function video(src) {\n            var sourceOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var preloadTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n            var videoElementAttributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n            var videoNode = new _videonode2.default(src, this._gl, this._renderGraph, this._currentTime, this._playbackRate, sourceOffset, preloadTime, this._videoElementCache, videoElementAttributes);\n            this._sourceNodes.push(videoNode);\n            return videoNode;\n        }\n\n        /**\n         * Create a new node representing an audio source\n         * @param {string|HTMLAudioElement|MediaStream} src - The url or audio element to create the audio node from.\n         * @param {number} [sourceOffset=0] - Offset into the start of the source audio to start playing from.\n         * @param {number} [preloadTime=4] - How long before a node is to be displayed to attmept to load it.\n         * @param {Object} [imageElementAttributes] - Any attributes to be given to the underlying image element.\n         * @return {AudioNode} A new audio node.\n         *\n         * @example\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var ctx = new VideoContext(canvasElement);\n         * var audioNode = ctx.audio(\"ziggystardust.mp3\");\n         */\n\n    }, {\n        key: \"audio\",\n        value: function audio(src) {\n            var sourceOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var preloadTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n            var audioElementAttributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n            var audioNode = new _audionode2.default(src, this._gl, this._renderGraph, this._currentTime, this._playbackRate, sourceOffset, preloadTime, this._audioElementCache, audioElementAttributes);\n            this._sourceNodes.push(audioNode);\n            return audioNode;\n        }\n\n        /**\n         * @deprecated\n         */\n\n    }, {\n        key: \"createVideoSourceNode\",\n        value: function createVideoSourceNode(src) {\n            var sourceOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var preloadTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n            var videoElementAttributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n            this._deprecate(\"Warning: createVideoSourceNode will be deprecated in v1.0, please switch to using VideoContext.video()\");\n            return this.video(src, sourceOffset, preloadTime, videoElementAttributes);\n        }\n\n        /**\n         * Create a new node representing an image source\n         * @param {string|Image|ImageBitmap} src - The url or image element to create the image node from.\n         * @param {number} [preloadTime=4] - How long before a node is to be displayed to attmept to load it.\n         * @param {Object} [imageElementAttributes] - Any attributes to be given to the underlying image element.\n         * @return {ImageNode} A new image node.\n         *\n         * @example\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var ctx = new VideoContext(canvasElement);\n         * var imageNode = ctx.image(\"image.png\");\n         *\n         * @example\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var imageElement = document.getElementById(\"image\");\n         * var ctx = new VideoContext(canvasElement);\n         * var imageNode = ctx.image(imageElement);\n         */\n\n    }, {\n        key: \"image\",\n        value: function image(src) {\n            var preloadTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n            var imageElementAttributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n            var imageNode = new _imagenode2.default(src, this._gl, this._renderGraph, this._currentTime, preloadTime, imageElementAttributes);\n            this._sourceNodes.push(imageNode);\n            return imageNode;\n        }\n\n        /**\n         * @deprecated\n         */\n\n    }, {\n        key: \"createImageSourceNode\",\n        value: function createImageSourceNode(src) {\n            var sourceOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var preloadTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n            var imageElementAttributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n            this._deprecate(\"Warning: createImageSourceNode will be deprecated in v1.0, please switch to using VideoContext.image()\");\n            return this.image(src, sourceOffset, preloadTime, imageElementAttributes);\n        }\n\n        /**\n         * Create a new node representing a canvas source\n         * @param {Canvas} src - The canvas element to create the canvas node from.\n         * @return {CanvasNode} A new canvas node.\n         */\n\n    }, {\n        key: \"canvas\",\n        value: function canvas(_canvas) {\n            var canvasNode = new _canvasnode2.default(_canvas, this._gl, this._renderGraph, this._currentTime);\n            this._sourceNodes.push(canvasNode);\n            return canvasNode;\n        }\n\n        /**\n         * @deprecated\n         */\n\n    }, {\n        key: \"createCanvasSourceNode\",\n        value: function createCanvasSourceNode(canvas) {\n            var sourceOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var preloadTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n\n            this._deprecate(\"Warning: createCanvasSourceNode will be deprecated in v1.0, please switch to using VideoContext.canvas()\");\n            return this.canvas(canvas, sourceOffset, preloadTime);\n        }\n\n        /**\n         * Create a new effect node.\n         * @param {Object} definition - this is an object defining the shaders, inputs, and properties of the compositing node to create. Builtin definitions can be found by accessing VideoContext.DEFINITIONS.\n         * @return {EffectNode} A new effect node created from the passed definition\n         */\n\n    }, {\n        key: \"effect\",\n        value: function effect(definition) {\n            var effectNode = new _effectnode2.default(this._gl, this._renderGraph, definition);\n            this._processingNodes.push(effectNode);\n            return effectNode;\n        }\n\n        /**\n         * @deprecated\n         */\n\n    }, {\n        key: \"createEffectNode\",\n        value: function createEffectNode(definition) {\n            this._deprecate(\"Warning: createEffectNode will be deprecated in v1.0, please switch to using VideoContext.effect()\");\n            return this.effect(definition);\n        }\n\n        /**\n         * Create a new compositiing node.\n         *\n         * Compositing nodes are used for operations such as combining multiple video sources into a single track/connection for further processing in the graph.\n         *\n         * A compositing node is slightly different to other processing nodes in that it only has one input in it's definition but can have unlimited connections made to it.\n         * The shader in the definition is run for each input in turn, drawing them to the output buffer. This means there can be no interaction between the spearte inputs to a compositing node, as they are individually processed in seperate shader passes.\n         *\n         * @param {Object} definition - this is an object defining the shaders, inputs, and properties of the compositing node to create. Builtin definitions can be found by accessing VideoContext.DEFINITIONS\n         *\n         * @return {CompositingNode} A new compositing node created from the passed definition.\n         *\n         * @example\n         *\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var ctx = new VideoContext(canvasElement);\n         *\n         * //A simple compositing node definition which just renders all the inputs to the output buffer.\n         * var combineDefinition = {\n         *     vertexShader : \"\\\n         *         attribute vec2 a_position;\\\n         *         attribute vec2 a_texCoord;\\\n         *         varying vec2 v_texCoord;\\\n         *         void main() {\\\n         *             gl_Position = vec4(vec2(2.0,2.0)*vec2(1.0, 1.0), 0.0, 1.0);\\\n         *             v_texCoord = a_texCoord;\\\n         *         }\",\n         *     fragmentShader : \"\\\n         *         precision mediump float;\\\n         *         uniform sampler2D u_image;\\\n         *         uniform float a;\\\n         *         varying vec2 v_texCoord;\\\n         *         varying float v_progress;\\\n         *         void main(){\\\n         *             vec4 color = texture2D(u_image, v_texCoord);\\\n         *             gl_FragColor = color;\\\n         *         }\",\n         *     properties:{\n         *         \"a\":{type:\"uniform\", value:0.0},\n         *     },\n         *     inputs:[\"u_image\"]\n         * };\n         * //Create the node, passing in the definition.\n         * var trackNode = videoCtx.compositor(combineDefinition);\n         *\n         * //create two videos which will play at back to back\n         * var videoNode1 = ctx.video(\"video1.mp4\");\n         * videoNode1.play(0);\n         * videoNode1.stop(10);\n         * var videoNode2 = ctx.video(\"video2.mp4\");\n         * videoNode2.play(10);\n         * videoNode2.stop(20);\n         *\n         * //Connect the nodes to the combine node. This will give a single connection representing the two videos which can\n         * //be connected to other effects such as LUTs, chromakeyers, etc.\n         * videoNode1.connect(trackNode);\n         * videoNode2.connect(trackNode);\n         *\n         * //Don't do anything exciting, just connect it to the output.\n         * trackNode.connect(ctx.destination);\n         *\n         */\n\n    }, {\n        key: \"compositor\",\n        value: function compositor(definition) {\n            var compositingNode = new _compositingnode2.default(this._gl, this._renderGraph, definition);\n            this._processingNodes.push(compositingNode);\n            return compositingNode;\n        }\n\n        /**\n         * Instanciate a custom built source node\n         * @param {SourceNode} CustomSourceNode\n         * @param {Object} src\n         * @param  {...any} options\n         */\n\n    }, {\n        key: \"customSourceNode\",\n        value: function customSourceNode(CustomSourceNode, src) {\n            for (var _len = arguments.length, options = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n                options[_key - 2] = arguments[_key];\n            }\n\n            var customSourceNode = new (Function.prototype.bind.apply(CustomSourceNode, [null].concat([src, this._gl, this._renderGraph, this._currentTime], options)))();\n            this._sourceNodes.push(customSourceNode);\n            return customSourceNode;\n        }\n\n        /**\n         * @depricated\n         */\n\n    }, {\n        key: \"createCompositingNode\",\n        value: function createCompositingNode(definition) {\n            this._deprecate(\"Warning: createCompositingNode will be deprecated in v1.0, please switch to using VideoContext.compositor()\");\n            return this.compositor(definition);\n        }\n\n        /**\n         * Create a new transition node.\n         *\n         * Transistion nodes are a type of effect node which have parameters which can be changed as events on the timeline.\n         *\n         * For example a transition node which cross-fades between two videos could have a \"mix\" property which sets the\n         * progress through the transistion. Rather than having to write your own code to adjust this property at specfic\n         * points in time a transition node has a \"transition\" function which takes a startTime, stopTime, targetValue, and a\n         * propertyName (which will be \"mix\"). This will linearly interpolate the property from the curernt value to\n         * tragetValue between the startTime and stopTime.\n         *\n         * @param {Object} definition - this is an object defining the shaders, inputs, and properties of the transition node to create.\n         * @return {TransitionNode} A new transition node created from the passed definition.\n         * @example\n         *\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var ctx = new VideoContext(canvasElement);\n         *\n         * //A simple cross-fade node definition which cross-fades between two videos based on the mix property.\n         * var crossfadeDefinition = {\n         *     vertexShader : \"\\\n         *        attribute vec2 a_position;\\\n         *        attribute vec2 a_texCoord;\\\n         *        varying vec2 v_texCoord;\\\n         *        void main() {\\\n         *            gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\\\n         *            v_texCoord = a_texCoord;\\\n         *         }\",\n         *     fragmentShader : \"\\\n         *         precision mediump float;\\\n         *         uniform sampler2D u_image_a;\\\n         *         uniform sampler2D u_image_b;\\\n         *         uniform float mix;\\\n         *         varying vec2 v_texCoord;\\\n         *         varying float v_mix;\\\n         *         void main(){\\\n         *             vec4 color_a = texture2D(u_image_a, v_texCoord);\\\n         *             vec4 color_b = texture2D(u_image_b, v_texCoord);\\\n         *             color_a[0] *= mix;\\\n         *             color_a[1] *= mix;\\\n         *             color_a[2] *= mix;\\\n         *             color_a[3] *= mix;\\\n         *             color_b[0] *= (1.0 - mix);\\\n         *             color_b[1] *= (1.0 - mix);\\\n         *             color_b[2] *= (1.0 - mix);\\\n         *             color_b[3] *= (1.0 - mix);\\\n         *             gl_FragColor = color_a + color_b;\\\n         *         }\",\n         *     properties:{\n         *         \"mix\":{type:\"uniform\", value:0.0},\n         *     },\n         *     inputs:[\"u_image_a\",\"u_image_b\"]\n         * };\n         *\n         * //Create the node, passing in the definition.\n         * var transitionNode = videoCtx.transition(crossfadeDefinition);\n         *\n         * //create two videos which will overlap by two seconds\n         * var videoNode1 = ctx.video(\"video1.mp4\");\n         * videoNode1.play(0);\n         * videoNode1.stop(10);\n         * var videoNode2 = ctx.video(\"video2.mp4\");\n         * videoNode2.play(8);\n         * videoNode2.stop(18);\n         *\n         * //Connect the nodes to the transistion node.\n         * videoNode1.connect(transitionNode);\n         * videoNode2.connect(transitionNode);\n         *\n         * //Set-up a transition which happens at the crossover point of the playback of the two videos\n         * transitionNode.transition(8,10,1.0,\"mix\");\n         *\n         * //Connect the transition node to the output\n         * transitionNode.connect(ctx.destination);\n         *\n         * //start playback\n         * ctx.play();\n         */\n\n    }, {\n        key: \"transition\",\n        value: function transition(definition) {\n            var transitionNode = new _transitionnode2.default(this._gl, this._renderGraph, definition);\n            this._processingNodes.push(transitionNode);\n            return transitionNode;\n        }\n\n        /**\n         * @deprecated\n         */\n\n    }, {\n        key: \"createTransitionNode\",\n        value: function createTransitionNode(definition) {\n            this._deprecate(\"Warning: createTransitionNode will be deprecated in v1.0, please switch to using VideoContext.transition()\");\n            return this.transition(definition);\n        }\n    }, {\n        key: \"_isStalled\",\n        value: function _isStalled() {\n            for (var i = 0; i < this._sourceNodes.length; i++) {\n                var sourceNode = this._sourceNodes[i];\n                if (!sourceNode._isReady()) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        /**\n         * This allows manual calling of the update loop of the videoContext.\n         *\n         * @param {Number} dt - The difference in seconds between this and the previous calling of update.\n         * @example\n         *\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var ctx = new VideoContext(canvasElement, undefined, {\"manualUpdate\" : true});\n         *\n         * var previousTime;\n         * function update(time){\n         *     if (previousTime === undefined) previousTime = time;\n         *     var dt = (time - previousTime)/1000;\n         *     ctx.update(dt);\n         *     previousTime = time;\n         *     requestAnimationFrame(update);\n         * }\n         * update();\n         *\n         */\n\n    }, {\n        key: \"update\",\n        value: function update(dt) {\n            this._update(dt);\n        }\n    }, {\n        key: \"_update\",\n        value: function _update(dt) {\n            //Remove any destroyed nodes\n            this._sourceNodes = this._sourceNodes.filter(function (sourceNode) {\n                if (!sourceNode.destroyed) return sourceNode;\n            });\n\n            this._processingNodes = this._processingNodes.filter(function (processingNode) {\n                if (!processingNode.destroyed) return processingNode;\n            });\n\n            if (this._state === VideoContext.STATE.PLAYING || this._state === VideoContext.STATE.STALLED || this._state === VideoContext.STATE.PAUSED) {\n                this._callCallbacks(VideoContext.EVENTS.UPDATE);\n\n                if (this._state !== VideoContext.STATE.PAUSED) {\n                    if (this._isStalled()) {\n                        this._callCallbacks(VideoContext.EVENTS.STALLED);\n                        this._state = VideoContext.STATE.STALLED;\n                    } else {\n                        this._state = VideoContext.STATE.PLAYING;\n                    }\n                }\n\n                if (this._state === VideoContext.STATE.PLAYING) {\n                    //Handle timeline callbacks.\n                    var activeCallbacks = new Map();\n                    var _iteratorNormalCompletion5 = true;\n                    var _didIteratorError5 = false;\n                    var _iteratorError5 = undefined;\n\n                    try {\n                        for (var _iterator5 = this._timelineCallbacks[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                            var callback = _step5.value;\n\n                            if (callback.time >= this.currentTime && callback.time < this._currentTime + dt * this._playbackRate) {\n                                //group the callbacks by time\n                                if (!activeCallbacks.has(callback.time)) activeCallbacks.set(callback.time, []);\n                                activeCallbacks.get(callback.time).push(callback);\n                            }\n                        }\n\n                        //Sort the groups of callbacks by the times of the groups\n                    } catch (err) {\n                        _didIteratorError5 = true;\n                        _iteratorError5 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                                _iterator5.return();\n                            }\n                        } finally {\n                            if (_didIteratorError5) {\n                                throw _iteratorError5;\n                            }\n                        }\n                    }\n\n                    var timeIntervals = Array.from(activeCallbacks.keys());\n                    timeIntervals.sort(function (a, b) {\n                        return a - b;\n                    });\n\n                    var _iteratorNormalCompletion6 = true;\n                    var _didIteratorError6 = false;\n                    var _iteratorError6 = undefined;\n\n                    try {\n                        for (var _iterator6 = timeIntervals[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                            var t = _step6.value;\n\n                            var callbacks = activeCallbacks.get(t);\n                            callbacks.sort(function (a, b) {\n                                return a.ordering - b.ordering;\n                            });\n                            var _iteratorNormalCompletion7 = true;\n                            var _didIteratorError7 = false;\n                            var _iteratorError7 = undefined;\n\n                            try {\n                                for (var _iterator7 = callbacks[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                                    var _callback2 = _step7.value;\n\n                                    _callback2.func();\n                                }\n                            } catch (err) {\n                                _didIteratorError7 = true;\n                                _iteratorError7 = err;\n                            } finally {\n                                try {\n                                    if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                                        _iterator7.return();\n                                    }\n                                } finally {\n                                    if (_didIteratorError7) {\n                                        throw _iteratorError7;\n                                    }\n                                }\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError6 = true;\n                        _iteratorError6 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                                _iterator6.return();\n                            }\n                        } finally {\n                            if (_didIteratorError6) {\n                                throw _iteratorError6;\n                            }\n                        }\n                    }\n\n                    this._currentTime += dt * this._playbackRate;\n                    if (this._currentTime > this.duration && this._endOnLastSourceEnd) {\n                        //Do an update od the sourcenodes in case anything in the \"ended\" callbacks modifes currentTime and sources haven't had a chance to stop.\n                        for (var i = 0; i < this._sourceNodes.length; i++) {\n                            this._sourceNodes[i]._update(this._currentTime);\n                        }\n                        this._state = VideoContext.STATE.ENDED;\n                        this._callCallbacks(VideoContext.EVENTS.ENDED);\n                    }\n                }\n\n                var sourcesPlaying = false;\n\n                for (var _i = 0; _i < this._sourceNodes.length; _i++) {\n                    var sourceNode = this._sourceNodes[_i];\n\n                    if (this._state === VideoContext.STATE.STALLED) {\n                        if (sourceNode._isReady() && sourceNode._state === _sourcenode.SOURCENODESTATE.playing) sourceNode._pause();\n                    }\n                    if (this._state === VideoContext.STATE.PAUSED) {\n                        sourceNode._pause();\n                    }\n                    if (this._state === VideoContext.STATE.PLAYING) {\n                        sourceNode._play();\n                    }\n                    sourceNode._update(this._currentTime);\n                    if (sourceNode._state === _sourcenode.SOURCENODESTATE.paused || sourceNode._state === _sourcenode.SOURCENODESTATE.playing) {\n                        sourcesPlaying = true;\n                    }\n                }\n\n                if (sourcesPlaying !== this._sourcesPlaying && this._state === VideoContext.STATE.PLAYING) {\n                    if (sourcesPlaying === true) {\n                        this._callCallbacks(VideoContext.EVENTS.CONTENT);\n                    } else {\n                        this._callCallbacks(VideoContext.EVENTS.NOCONTENT);\n                    }\n                    this._sourcesPlaying = sourcesPlaying;\n                }\n\n                /*\n                 * Itterate the directed acyclic graph using Khan's algorithm (KHAAAAAN!).\n                 *\n                 * This has highlighted a bunch of ineffencies in the rendergraph class about how its stores connections.\n                 * Mainly the fact that to get inputs for a node you have to iterate the full list of connections rather than\n                 * a node owning it's connections.\n                 * The trade off with changing this is making/removing connections becomes more costly performance wise, but\n                 * this is definitely worth while because getting the connnections is a much more common operation.\n                 *\n                 * TL;DR Future matt - refactor this.\n                 *\n                 */\n                var sortedNodes = [];\n                var connections = this._renderGraph.connections.slice();\n                var nodes = _rendergraph2.default.getInputlessNodes(connections);\n\n                while (nodes.length > 0) {\n                    var node = nodes.pop();\n                    sortedNodes.push(node);\n                    var _iteratorNormalCompletion8 = true;\n                    var _didIteratorError8 = false;\n                    var _iteratorError8 = undefined;\n\n                    try {\n                        for (var _iterator8 = _rendergraph2.default.outputEdgesFor(node, connections)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                            var edge = _step8.value;\n\n                            var index = connections.indexOf(edge);\n                            if (index > -1) connections.splice(index, 1);\n                            if (_rendergraph2.default.inputEdgesFor(edge.destination, connections).length === 0) {\n                                nodes.push(edge.destination);\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError8 = true;\n                        _iteratorError8 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                                _iterator8.return();\n                            }\n                        } finally {\n                            if (_didIteratorError8) {\n                                throw _iteratorError8;\n                            }\n                        }\n                    }\n                }\n\n                var _iteratorNormalCompletion9 = true;\n                var _didIteratorError9 = false;\n                var _iteratorError9 = undefined;\n\n                try {\n                    for (var _iterator9 = sortedNodes[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                        var _node = _step9.value;\n\n                        if (this._sourceNodes.indexOf(_node) === -1) {\n                            _node._update(this._currentTime);\n                            _node._render();\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError9 = true;\n                    _iteratorError9 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                            _iterator9.return();\n                        }\n                    } finally {\n                        if (_didIteratorError9) {\n                            throw _iteratorError9;\n                        }\n                    }\n                }\n            }\n        }\n\n        /**\n         * Destroy all nodes in the graph and reset the timeline. After calling this any created nodes will be unusable.\n         */\n\n    }, {\n        key: \"reset\",\n        value: function reset() {\n            var _this2 = this;\n\n            var _iteratorNormalCompletion10 = true;\n            var _didIteratorError10 = false;\n            var _iteratorError10 = undefined;\n\n            try {\n                for (var _iterator10 = this._callbacks[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                    var callback = _step10.value;\n\n                    this.unregisterCallback(callback);\n                }\n            } catch (err) {\n                _didIteratorError10 = true;\n                _iteratorError10 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                        _iterator10.return();\n                    }\n                } finally {\n                    if (_didIteratorError10) {\n                        throw _iteratorError10;\n                    }\n                }\n            }\n\n            var _iteratorNormalCompletion11 = true;\n            var _didIteratorError11 = false;\n            var _iteratorError11 = undefined;\n\n            try {\n                for (var _iterator11 = this._sourceNodes[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n                    var node = _step11.value;\n\n                    node.destroy();\n                }\n            } catch (err) {\n                _didIteratorError11 = true;\n                _iteratorError11 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion11 && _iterator11.return) {\n                        _iterator11.return();\n                    }\n                } finally {\n                    if (_didIteratorError11) {\n                        throw _iteratorError11;\n                    }\n                }\n            }\n\n            var _iteratorNormalCompletion12 = true;\n            var _didIteratorError12 = false;\n            var _iteratorError12 = undefined;\n\n            try {\n                for (var _iterator12 = this._processingNodes[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n                    var _node2 = _step12.value;\n\n                    _node2.destroy();\n                }\n            } catch (err) {\n                _didIteratorError12 = true;\n                _iteratorError12 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion12 && _iterator12.return) {\n                        _iterator12.return();\n                    }\n                } finally {\n                    if (_didIteratorError12) {\n                        throw _iteratorError12;\n                    }\n                }\n            }\n\n            this._update(0);\n            this._sourceNodes = [];\n            this._processingNodes = [];\n            this._timeline = [];\n            this._currentTime = 0;\n            this._state = VideoContext.STATE.PAUSED;\n            this._playbackRate = 1.0;\n            this._sourcesPlaying = undefined;\n            Object.keys(VideoContext.EVENTS).forEach(function (name) {\n                return _this2._callbacks.set(VideoContext.EVENTS[name], []);\n            });\n            this._timelineCallbacks = [];\n        }\n    }, {\n        key: \"_deprecate\",\n        value: function _deprecate(msg) {\n            console.log(msg);\n        }\n    }, {\n        key: \"snapshot\",\n\n\n        /**\n         * Get a JS Object containing the state of the VideoContext instance and all the created nodes.\n         */\n        value: function snapshot() {\n            return (0, _utils.snapshot)(this);\n        }\n    }, {\n        key: \"id\",\n        get: function get() {\n            return this._id;\n        }\n\n        /**\n         * Set the ID of the VideoContext instance. This should be unique.\n         */\n        ,\n        set: function set(newID) {\n            delete window.__VIDEOCONTEXT_REFS__[this._id];\n            if (window.__VIDEOCONTEXT_REFS__[newID] !== undefined) console.warn(\"Warning; setting id to that of an existing VideoContext instance.\");\n            window.__VIDEOCONTEXT_REFS__[newID] = this;\n            this._id = newID;\n        }\n    }, {\n        key: \"element\",\n        get: function get() {\n            return this._canvas;\n        }\n\n        /**\n         * Get the current state.\n         * @return {STATE} The number representing the state.\n         *\n         */\n\n    }, {\n        key: \"state\",\n        get: function get() {\n            return this._state;\n        }\n\n        /**\n         * Set the progress through the internal timeline.\n         * Setting this can be used as a way to implement a scrubbable timeline.\n         *\n         * @param {number} currentTime - this is the currentTime to set in seconds.\n         *\n         * @example\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var ctx = new VideoContext(canvasElement);\n         * var videoNode = ctx.video(\"video.mp4\");\n         * videoNode.connect(ctx.destination);\n         * videoNode.start(0);\n         * videoNode.stop(20);\n         * ctx.currentTime = 10; // seek 10 seconds in\n         * ctx.play();\n         *\n         */\n\n    }, {\n        key: \"currentTime\",\n        set: function set(currentTime) {\n            if (currentTime < this.duration && this._state === VideoContext.STATE.ENDED) this._state = VideoContext.STATE.PAUSED;\n\n            if (typeof currentTime === \"string\" || currentTime instanceof String) {\n                currentTime = parseFloat(currentTime);\n            }\n\n            for (var i = 0; i < this._sourceNodes.length; i++) {\n                this._sourceNodes[i]._seek(currentTime);\n            }\n            for (var _i2 = 0; _i2 < this._processingNodes.length; _i2++) {\n                this._processingNodes[_i2]._seek(currentTime);\n            }\n            this._currentTime = currentTime;\n        }\n\n        /**\n         * Get how far through the internal timeline has been played.\n         *\n         * Getting this value will give the current playhead position. Can be used for updating timelines.\n         * @return {number} The time in seconds through the current playlist.\n         *\n         * @example\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var ctx = new VideoContext(canvasElement);\n         * var videoNode = ctx.video(\"video.mp4\");\n         * videoNode.connect(ctx.destination);\n         * videoNode.start(0);\n         * videoNode.stop(10);\n         * ctx.play();\n         * setTimeout(() => console.log(ctx.currentTime),1000); //should print roughly 1.0\n         *\n         */\n        ,\n        get: function get() {\n            return this._currentTime;\n        }\n\n        /**\n         * Get the time at which the last node in the current internal timeline finishes playing.\n         *\n         * @return {number} The end time in seconds of the last video node to finish playing.\n         *\n         * @example\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var ctx = new VideoContext(canvasElement);\n         * console.log(ctx.duration); //prints 0\n         *\n         * var videoNode = ctx.video(\"video.mp4\");\n         * videoNode.connect(ctx.destination);\n         * videoNode.start(0);\n         * videoNode.stop(10);\n         *\n         * console.log(ctx.duration); //prints 10\n         *\n         * ctx.play();\n         */\n\n    }, {\n        key: \"duration\",\n        get: function get() {\n            var maxTime = 0;\n            for (var i = 0; i < this._sourceNodes.length; i++) {\n                if (this._sourceNodes[i].state !== _sourcenode.SOURCENODESTATE.waiting && this._sourceNodes[i]._stopTime > maxTime) {\n                    maxTime = this._sourceNodes[i]._stopTime;\n                }\n            }\n            return maxTime;\n        }\n\n        /**\n         * Get the final node in the render graph which represents the canvas to display content on to.\n         *\n         * This proprety is read-only and there can only ever be one destination node. Other nodes can connect to this but you cannot connect this node to anything.\n         *\n         * @return {DestinationNode} A graph node representing the canvas to display the content on.\n         * @example\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var ctx = new VideoContext(canvasElement);\n         * var videoNode = ctx.video(\"video.mp4\");\n         * videoNode.start(0);\n         * videoNode.stop(10);\n         * videoNode.connect(ctx.destination);\n         *\n         */\n\n    }, {\n        key: \"destination\",\n        get: function get() {\n            return this._destinationNode;\n        }\n\n        /**\n         * Set the playback rate of the VideoContext instance.\n         * This will alter the playback speed of all media elements played through the VideoContext.\n         *\n         * @param {number} rate - this is the playback rate.\n         *\n         * @example\n         * var canvasElement = document.getElementById(\"canvas\");\n         * var ctx = new VideoContext(canvasElement);\n         * var videoNode = ctx.video(\"video.mp4\");\n         * videoNode.start(0);\n         * videoNode.stop(10);\n         * videoNode.connect(ctx.destination);\n         * ctx.playbackRate = 2;\n         * ctx.play(); // Double playback rate means this will finish playing in 5 seconds.\n         */\n\n    }, {\n        key: \"playbackRate\",\n        set: function set(rate) {\n            if (rate <= 0) {\n                throw new RangeError(\"playbackRate must be greater than 0\");\n            }\n            var _iteratorNormalCompletion13 = true;\n            var _didIteratorError13 = false;\n            var _iteratorError13 = undefined;\n\n            try {\n                for (var _iterator13 = this._sourceNodes[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                    var node = _step13.value;\n\n                    if (node.constructor.name === _videonode.VIDEOTYPE) {\n                        node._globalPlaybackRate = rate;\n                        node._playbackRateUpdated = true;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError13 = true;\n                _iteratorError13 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                        _iterator13.return();\n                    }\n                } finally {\n                    if (_didIteratorError13) {\n                        throw _iteratorError13;\n                    }\n                }\n            }\n\n            this._playbackRate = rate;\n        }\n\n        /**\n         *  Return the current playbackRate of the video context.\n         * @return {number} A value representing the playbackRate. 1.0 by default.\n         */\n        ,\n        get: function get() {\n            return this._playbackRate;\n        }\n\n        /**\n         * Set the volume of all MediaNode created in the VideoContext.\n         * @param {number} volume - the volume to apply to the video nodes.\n         */\n\n    }, {\n        key: \"volume\",\n        set: function set(vol) {\n            var _iteratorNormalCompletion14 = true;\n            var _didIteratorError14 = false;\n            var _iteratorError14 = undefined;\n\n            try {\n                for (var _iterator14 = this._sourceNodes[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n                    var node = _step14.value;\n\n                    if (node instanceof _videonode2.default || node instanceof _audionode2.default) {\n                        node.volume = vol;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError14 = true;\n                _iteratorError14 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                        _iterator14.return();\n                    }\n                } finally {\n                    if (_didIteratorError14) {\n                        throw _iteratorError14;\n                    }\n                }\n            }\n\n            this._volume = vol;\n        }\n\n        /**\n         * Return the current volume of the video context.\n         * @return {number} A value representing the volume. 1.0 by default.\n         */\n        ,\n        get: function get() {\n            return this._volume;\n        }\n    }], [{\n        key: \"DEFINITIONS\",\n        get: function get() {\n            return _definitions2.default;\n        }\n    }, {\n        key: \"NODES\",\n        get: function get() {\n            return _nodes2.default;\n        }\n    }]);\n\n    return VideoContext;\n}();\n\n/**\n * Video Context States\n * @readonly\n * @typedef {Object} STATE\n * @property {number} STATE.PLAYING - All sources are active\n * @property {number} STATE.PAUSED - All sources are paused\n * @property {number} STATE.STALLED - One or more sources is unable to play\n * @property {number} STATE.ENDED - All sources have finished playing\n * @property {number} STATE.BROKEN - The render graph is in a broken state\n */\n\n\nexports.default = VideoContext;\nvar STATE = Object.freeze({\n    PLAYING: 0,\n    PAUSED: 1,\n    STALLED: 2,\n    ENDED: 3,\n    BROKEN: 4\n});\nVideoContext.STATE = STATE;\n\n/**\n * Video Context Events\n * @readonly\n * @typedef {Object} STATE\n * @property {string} STATE.UPDATE - Called any time a frame is rendered to the screen.\n * @property {string} STATE.STALLED - happens anytime the playback is stopped due to buffer starvation for playing assets.\n * @property {string} STATE.ENDED - Called once plackback has finished (i.e ctx.currentTime == ctx.duration).\n * @property {string} STATE.CONTENT - Called at the start of a time region where there is content playing out of one or more sourceNodes.\n * @property {number} STATE.NOCONTENT - Called at the start of any time region where the VideoContext is still playing, but there are currently no active playing sources.\n */\nvar EVENTS = Object.freeze({\n    UPDATE: \"update\",\n    STALLED: \"stalled\",\n    ENDED: \"ended\",\n    CONTENT: \"content\",\n    NOCONTENT: \"nocontent\"\n});\nVideoContext.EVENTS = EVENTS;\n\nVideoContext.visualiseVideoContextTimeline = _utils.visualiseVideoContextTimeline;\nVideoContext.visualiseVideoContextGraph = _utils.visualiseVideoContextGraph;\nVideoContext.createControlFormForNode = _utils.createControlFormForNode;\nVideoContext.createSigmaGraphDataFromRenderGraph = _utils.createSigmaGraphDataFromRenderGraph;\nVideoContext.exportToJSON = _utils.exportToJSON;\nVideoContext.updateablesManager = updateablesManager;\nVideoContext.importSimpleEDL = _utils.importSimpleEDL;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/videoelementcache.js\":\n/*!**********************************!*\\\n  !*** ./src/videoelementcache.js ***!\n  \\**********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_299683__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _videoelementcacheitem = __nested_webpack_require_299683__(/*! ./videoelementcacheitem */ \"./src/videoelementcacheitem.js\");\n\nvar _videoelementcacheitem2 = _interopRequireDefault(_videoelementcacheitem);\n\nvar _utils = __nested_webpack_require_299683__(/*! ./utils */ \"./src/utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar VideoElementCache = function () {\n    function VideoElementCache() {\n        var cache_size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n\n        _classCallCheck(this, VideoElementCache);\n\n        this._cacheItems = [];\n        this._cacheItemsInitialised = false;\n        for (var i = 0; i < cache_size; i++) {\n            // Create a video element and cache\n            this._cacheItems.push(new _videoelementcacheitem2.default());\n        }\n    }\n\n    _createClass(VideoElementCache, [{\n        key: \"init\",\n        value: function init() {\n            if (!this._cacheItemsInitialised) {\n                var _loop = function _loop(cacheItem) {\n                    try {\n                        cacheItem.element.play().then(function () {\n                            // Pause any elements not in the \"playing\" state\n                            if (!cacheItem.isPlaying()) {\n                                cacheItem.element.pause();\n                            }\n                        }, function (e) {\n                            if (e.name !== \"NotSupportedError\") throw e;\n                        });\n                    } catch (e) {\n                        //console.log(e.name);\n                    }\n                };\n\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = this._cacheItems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var cacheItem = _step.value;\n\n                        _loop(cacheItem);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n            this._cacheItemsInitialised = true;\n        }\n\n        /**\n         * Find and return an empty initialised element or, if the cache is\n         * empty, create a new one.\n         *\n         * @param {Object} mediaNode A `MediaNode` instance\n         */\n\n    }, {\n        key: \"getElementAndLinkToNode\",\n        value: function getElementAndLinkToNode(mediaNode) {\n            // Try and get an already intialised element.\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = this._cacheItems[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var _cacheItem = _step2.value;\n\n                    // For some reason an uninitialised videoElement has its sr attribute set to the windows href. Hence the below check.\n                    if (!(0, _utils.mediaElementHasSource)(_cacheItem.element)) {\n                        // attach node to the element\n                        _cacheItem.linkNode(mediaNode);\n                        return _cacheItem.element;\n                    }\n                }\n                // Fallback to creating a new element if none exist or are available\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            console.debug(\"No available video element in the cache, creating a new one. This may break mobile, make your initial cache larger.\");\n            var cacheItem = new _videoelementcacheitem2.default(mediaNode);\n            this._cacheItems.push(cacheItem);\n            this._cacheItemsInitialised = false;\n            return cacheItem.element;\n        }\n\n        /**\n         * Unlink any media node currently linked to a cached video element.\n         *\n         * @param {VideoElement} element The element to unlink from any media nodes\n         */\n\n    }, {\n        key: \"unlinkNodeFromElement\",\n        value: function unlinkNodeFromElement(element) {\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = this._cacheItems[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var cacheItem = _step3.value;\n\n                    // Unlink the node from the element\n                    if (element === cacheItem._element) {\n                        cacheItem.unlinkNode();\n                    }\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"length\",\n        get: function get() {\n            return this._cacheItems.length;\n        }\n    }, {\n        key: \"unused\",\n        get: function get() {\n            var count = 0;\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n                for (var _iterator4 = this._cacheItems[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var cacheItem = _step4.value;\n\n                    // For some reason an uninitialised videoElement has its sr attribute set to the windows href. Hence the below check.\n                    if (!(0, _utils.mediaElementHasSource)(cacheItem.element)) count += 1;\n                }\n            } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                        _iterator4.return();\n                    }\n                } finally {\n                    if (_didIteratorError4) {\n                        throw _iteratorError4;\n                    }\n                }\n            }\n\n            return count;\n        }\n    }]);\n\n    return VideoElementCache;\n}();\n\nexports.default = VideoElementCache;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/videoelementcacheitem.js\":\n/*!**************************************!*\\\n  !*** ./src/videoelementcacheitem.js ***!\n  \\**************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_308436__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _sourcenode = __nested_webpack_require_308436__(/*! ./SourceNodes/sourcenode */ \"./src/SourceNodes/sourcenode.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * A video element item created and managed by the `VideoElementCache`.\n *\n * This creates and stores a `<video />` element, which is assigned\n * to a `MediaNode` by the `VideoElementCache` for playback. Once\n * playback has completed the `MediaNode` association will be removed\n * and potentially replaced with another.\n */\nvar VideoElementCacheItem = function () {\n    function VideoElementCacheItem() {\n        var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n        _classCallCheck(this, VideoElementCacheItem);\n\n        this._element = this._createElement();\n        this._node = node;\n    }\n\n    _createClass(VideoElementCacheItem, [{\n        key: \"_createElement\",\n        value: function _createElement() {\n            var videoElement = document.createElement(\"video\");\n            videoElement.setAttribute(\"crossorigin\", \"anonymous\");\n            videoElement.setAttribute(\"webkit-playsinline\", \"\");\n            videoElement.setAttribute(\"playsinline\", \"\");\n            return videoElement;\n        }\n    }, {\n        key: \"linkNode\",\n        value: function linkNode(node) {\n            this._node = node;\n        }\n    }, {\n        key: \"unlinkNode\",\n        value: function unlinkNode() {\n            this._node = null;\n        }\n    }, {\n        key: \"isPlaying\",\n        value: function isPlaying() {\n            return this._node && this._node._state === _sourcenode.SOURCENODESTATE.playing;\n        }\n    }, {\n        key: \"element\",\n        get: function get() {\n            return this._element;\n        },\n        set: function set(element) {\n            this._element = element;\n        }\n    }]);\n\n    return VideoElementCacheItem;\n}();\n\nexports.default = VideoElementCacheItem;\nmodule.exports = exports.default;\n\n/***/ })\n\n/******/ });\n});\n//# sourceMappingURL=videocontext.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/videocontext/dist/videocontext.js\n");

/***/ }),

/***/ "./src/assets/js/app.js":
/*!******************************!*\
  !*** ./src/assets/js/app.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var videocontext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! videocontext */ \"./node_modules/videocontext/dist/videocontext.js\");\n/* harmony import */ var videocontext__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(videocontext__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\nwindow.addEventListener('load', () => {\r\n  const date = new Date(Date.now() + 96400e5).toUTCString();\r\n  const VideoContainer = document.querySelector('.video');\r\n  const VideoStart = document.querySelector('.video__item');\r\n  const VideoAudio = document.querySelector('.video__audio');\r\n  const GetLink = document.querySelectorAll('.home-btn .btn.lock');\r\n  const VideoHover = document.querySelector('.home__hover');\r\n  const Preloader = document.querySelector('.preloader');\r\n  const PreloaderAnswer = document.querySelector('.preloader__answer');\r\n  const Play = document.querySelector('#play');\r\n  const Width = window.innerWidth;\r\n  const VideoSkip = document.querySelector('.video__skip');\r\n  const Subscribe = document.querySelector('#subscribe');\r\n  const body = document.querySelector('body');\r\n  const home = document.querySelector('.home');\r\n\r\n  // Прогресс бар\r\n  setTimeout(() => {\r\n    Play.disabled = false;\r\n    Play.classList.add('show');\r\n  }, 3000);\r\n\r\n  // Пути видео\r\n  if (Width > 1600) {\r\n    VideoStart.src = '../assets/video/1920_track_convert.mp4';\r\n  } else if (Width <= 1600 && Width >= 1200) {\r\n    VideoStart.src = '../assets/video/1440_track_convert.mp4';\r\n  } else if (Width <= 1200 && Width >= 1024) {\r\n    VideoStart.src = '../assets/video/1024_track_convert.mp4';\r\n  } else {\r\n    VideoStart.src = '../assets/video/1284_track_convert.mp4';\r\n  }\r\n\r\n  // Запуск видео\r\n  // window.playClick = function () {\r\n  //   if (get_cookie('visited')) {\r\n  //     VideoSkip.classList.add('show');\r\n  //   }\r\n  //   document.cookie = 'visited=true; expires=' + date;\r\n  //   Preloader.classList.add('hide');\r\n  //   Play.classList.add('hide');\r\n  //   VideoStart.play();\r\n  // };\r\n\r\n  // Скип видео\r\n  function Skip() {\r\n    VideoStart.pause();\r\n    VideoContainer.remove();\r\n    if (Width < 1024) {\r\n      body.style.overflow = 'auto';\r\n      body.style.height = 'auto';\r\n      home.style.height = 'auto';\r\n      window.scrollBy(0, 0);\r\n    }\r\n  }\r\n\r\n  VideoSkip.addEventListener('click', () => {\r\n    Skip()\r\n  });\r\n\r\n  VideoStart.addEventListener('ended', () => {\r\n    Skip()\r\n  });\r\n\r\nwindow.playClick = function () {\r\n  if (get_cookie('visited')) {\r\n    VideoSkip.classList.add('show');\r\n  }\r\n  document.cookie = 'visited=true; expires=' + date;\r\n  Preloader.classList.add('hide');\r\n  Play.classList.add('hide');\r\n\r\n  const audio = new Audio();\r\n  audio.autoplay = true;\r\n  audio.src = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\r\n\r\n  setTimeout(() => {\r\n    const canvas = document.getElementById('canvas');\r\n    let srcVideo = '';\r\n    canvas.style.width = '100%';\r\n    canvas.style.height = '100%';\r\n\r\n    if (Width > 1600) {\r\n      srcVideo = '../assets/video/1920_track.mp4';\r\n      canvas.width = 1920;\r\n      canvas.height = 1080;\r\n    } else if (Width <= 1600 && Width >= 1200) {\r\n      srcVideo = '../assets/video/1440_track.mp4';\r\n      canvas.width = 1440;\r\n      canvas.height = 900;\r\n    } else if (Width <= 1200 && Width >= 1024) {\r\n      srcVideo = '../assets/video/1024_track.mp4';\r\n      canvas.width = 1024;\r\n      canvas.height = 1366;\r\n    } else {\r\n      srcVideo = '../assets/video/1284_track.mp4';\r\n      canvas.width = 1284;\r\n      canvas.height = 2778;\r\n    }\r\n\r\n    const videoCtx = new (videocontext__WEBPACK_IMPORTED_MODULE_0___default())(canvas);\r\n    const videoNode = videoCtx.video(srcVideo, 0, 2, {\r\n      volume: 0\r\n    });\r\n    // videoNode.volume(0);\r\n    // const audioNode = videoCtx.audio('../assets/video/audio.mp3');\r\n    // audioNode.connect(videoCtx.destination);\r\n    // audioNode.start(0);\r\n    videoNode.connect(videoCtx.destination);\r\n    videoNode.start(0);\r\n\r\n    //audio context\r\n    // const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n    // const source= audioCtx.createMediaElementSource(audio);\r\n    // source.connect(audioCtx.destination);\r\n    // audio.play();\r\n    videoCtx.play();\r\n    // VideoAudio.play()\r\n    videoCtx.registerCallback((videocontext__WEBPACK_IMPORTED_MODULE_0___default().EVENTS.CONTENT), () => {\r\n      audio.src = './assets/video/audio.mp3';\r\n    });\r\n\r\n    videoCtx.registerCallback((videocontext__WEBPACK_IMPORTED_MODULE_0___default().EVENTS.ENDED), () => {\r\n      VideoContainer.remove();\r\n      audio.pause();\r\n      if (Width < 1024) {\r\n        body.style.overflow = 'auto';\r\n        body.style.height = 'auto';\r\n        home.style.height = 'auto';\r\n        window.scrollBy(0, 0);\r\n      }\r\n    });\r\n\r\n    VideoSkip.addEventListener('click', () => {\r\n      videoCtx.pause();\r\n      audio.pause();\r\n      canvas.remove();\r\n      VideoContainer.remove();\r\n      if (Width < 1024) {\r\n        body.style.overflow = 'auto';\r\n        body.style.height = 'auto';\r\n        home.style.height = 'auto';\r\n        window.scrollBy(0, 0);\r\n      }\r\n    });\r\n  }, 1500);\r\n};\r\n\r\n  // Чистка hover видео\r\n  VideoHover.addEventListener('contextmenu', function (e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  }, false);\r\n  if (VideoHover.hasAttribute('controls')) {\r\n    VideoHover.removeAttribute('controls');\r\n  }\r\n\r\n  // Hover видео\r\n  GetLink.forEach(item => {\r\n    item.addEventListener(('click'), (e) => {\r\n      e.preventDefault();\r\n    });\r\n\r\n    const startHover = () => {\r\n      item.textContent = 'coming soon';\r\n      item.classList.add('white');\r\n      VideoHover.play();\r\n      VideoHover.classList.add('play');\r\n      VideoHover.addEventListener('ended', function () {\r\n        VideoHover.currentTime = 0;\r\n        VideoHover.play();\r\n      });\r\n    };\r\n\r\n    const removeHover = () => {\r\n      item.textContent = 'get started';\r\n      item.classList.remove('white');\r\n      VideoHover.classList.remove('play');\r\n      VideoHover.pause();\r\n    };\r\n\r\n    if (Width > 1023.98) {\r\n      item.addEventListener('mouseover', () => {\r\n        startHover();\r\n      });\r\n      item.addEventListener('mouseout', () => {\r\n        removeHover();\r\n      });\r\n    } else {\r\n      item.addEventListener('click', (e) => {\r\n        startHover();\r\n        setTimeout(() => {\r\n          removeHover();\r\n        }, 3000);\r\n      });\r\n    }\r\n  });\r\n\r\n  // Модальное окно\r\n  const Modal = document.querySelector('.modal');\r\n  const ModalClose = document.querySelector('.modal__close');\r\n  Subscribe.addEventListener('click', (e) => {\r\n    e.preventDefault();\r\n    Modal.classList.add('show');\r\n  });\r\n  ModalClose.addEventListener('click', () => {\r\n    Modal.classList.remove('show');\r\n  });\r\n\r\n  // cookie\r\n  function get_cookie (cookie_name) {\r\n    const results = document.cookie.match('(^|;) ?' + cookie_name + '=([^;]*)(;|$)');\r\n\r\n    if (results)\r\n      return (unescape(results[2]));\r\n    else\r\n      return null;\r\n  }\r\n\r\n  // reality? yes/no toggle\r\n  (function () {\r\n    setInterval(() => {\r\n      setTimeout(() => {\r\n        PreloaderAnswer.innerHTML = 'No';\r\n      }, 150);\r\n      setTimeout(() => {\r\n        PreloaderAnswer.innerHTML = 'Yes';\r\n      }, 300);\r\n    }, 300);\r\n  })();\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/assets/js/app.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/assets/js/app.js");
/******/ 	
/******/ })()
;